import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { BehaviorSubject, combineLatest, ReplaySubject, Subject } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { StripeService } from './services/stripe.service';
let PaymentRequestComponent = class PaymentRequestComponent {
    constructor(stripeService) {
        this.stripeService = stripeService;
        this.change = new EventEmitter();
        this.shippingAddressChange = new EventEmitter();
        this.shippingOptionChange = new EventEmitter();
        this.cancel = new EventEmitter();
        this.hide = false;
        this.styles$ = new BehaviorSubject({});
        this.options$ = new ReplaySubject();
        this.elementsOptions$ = new BehaviorSubject({});
        this.complete$ = new Subject();
        this._attached = false;
        this._opened = false;
    }
    set options(optionsIn) {
        this.options$.next(optionsIn);
    }
    set elementsOptions(optionsIn) {
        this.elementsOptions$.next(optionsIn);
    }
    set styles(optionsIn) {
        this.styles$.next(optionsIn);
    }
    set complete(success) {
        this.complete$.next(success);
    }
    ngOnInit() {
        this.elements$ = this.elementsOptions$.asObservable().pipe(switchMap(options => {
            return this.stripeService.elements(options);
        }));
        this.request$ = this.options$.asObservable().pipe(switchMap(options => {
            return this.stripeService.paymentRequest(options);
        }));
        this.complete$.subscribe(complete => {
            if (this.lastEvent) {
                if (complete) {
                    this.lastEvent.complete('success');
                }
                else {
                    this.lastEvent.complete('fail');
                }
            }
        });
    }
    ngAfterViewInit() {
        combineLatest(this.request$, this.elements$, this.options$, this.styles$).subscribe(([paymentRequest, elements, options, styles]) => {
            if (this.requestButton && !this._attached) {
                this._paymentRequest = paymentRequest;
                this._attached = true;
                const element = elements.create('paymentRequestButton', {
                    paymentRequest,
                    style: {
                        paymentRequestButton: Object.assign({}, styles)
                    }
                });
                this.hide = false;
                paymentRequest.canMakePayment().then(result => {
                    if (result) {
                        element.mount(this.requestButton.nativeElement);
                    }
                    else {
                        this.hide = true;
                    }
                });
                paymentRequest.on('shippingaddresschange', event => {
                    this.shippingAddressChange.emit(event);
                });
                paymentRequest.on('shippingoptionchange', event => {
                    this.shippingOptionChange.emit(event);
                });
                paymentRequest.on('token', event => {
                    this.change.emit(event);
                    this._opened = false;
                });
                paymentRequest.on('paymentmethod', event => {
                    this.change.emit(event);
                });
                paymentRequest.on('source', event => {
                    this.change.emit(event);
                });
                paymentRequest.on('cancel', event => {
                    this.cancel.emit(event);
                    this._opened = false;
                });
                paymentRequest.on('click', () => {
                    this._opened = true;
                });
            }
            else if (this._attached && !this._opened) {
                this._paymentRequest.update({
                    currency: options.currency,
                    total: options.total,
                    displayItems: options.displayItems,
                    shippingOptions: options.shippingOptions
                });
            }
        });
    }
};
PaymentRequestComponent.ctorParameters = () => [
    { type: StripeService }
];
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], PaymentRequestComponent.prototype, "options", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], PaymentRequestComponent.prototype, "elementsOptions", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], PaymentRequestComponent.prototype, "styles", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], PaymentRequestComponent.prototype, "complete", null);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], PaymentRequestComponent.prototype, "change", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], PaymentRequestComponent.prototype, "shippingAddressChange", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], PaymentRequestComponent.prototype, "shippingOptionChange", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], PaymentRequestComponent.prototype, "cancel", void 0);
tslib_1.__decorate([
    ViewChild('request', { static: false }),
    tslib_1.__metadata("design:type", ElementRef)
], PaymentRequestComponent.prototype, "requestButton", void 0);
PaymentRequestComponent = tslib_1.__decorate([
    Component({
        selector: 'ngx-payment-request',
        template: '<div #request [style.display-none]="hide"></div>'
    }),
    tslib_1.__metadata("design:paramtypes", [StripeService])
], PaymentRequestComponent);
export { PaymentRequestComponent };
//# sourceMappingURL=data:application/json;base64,