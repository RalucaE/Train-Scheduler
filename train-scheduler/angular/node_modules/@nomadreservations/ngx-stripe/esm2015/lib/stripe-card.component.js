import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { BehaviorSubject, combineLatest as observableCombineLatest } from 'rxjs';
import { filter, switchMap } from 'rxjs/operators';
import { StripeService } from './services/stripe.service';
let StripeCardComponent = class StripeCardComponent {
    constructor(stripeService) {
        this.stripeService = stripeService;
        this.change = new EventEmitter();
        this.complete = new EventEmitter();
        this.error = new EventEmitter();
        this.elementTypes = ['card'];
        this.options$ = new BehaviorSubject({});
        this.elementsOptions$ = new BehaviorSubject({});
    }
    set options(optionsIn) {
        this.options$.next(optionsIn);
    }
    set elementsOptions(optionsIn) {
        this.elementsOptions$.next(optionsIn);
    }
    ngAfterViewInit() {
        const elements$ = this.elementsOptions$.asObservable().pipe(switchMap(options => {
            if (Object.keys(options).length > 0) {
                return this.stripeService.elements(options);
            }
            return this.stripeService.elements();
        }));
        let complete = {};
        observableCombineLatest(elements$, this.options$.asObservable().pipe(filter(options => Boolean(options)))).subscribe(([elements, options]) => {
            this.elements = [];
            if (this.card) {
                for (const type of this.elementTypes) {
                    const element = elements.create(type, options);
                    complete = Object.assign({}, complete, { [type]: element });
                    if (['card', 'cardNumber'].indexOf(type) !== -1) {
                        this.cardElement = element;
                    }
                    const mountTo = this.card.nativeElement.querySelector(`.${type}`);
                    element.mount(mountTo);
                    element.on('change', changedCard => {
                        let isComplete = changedCard.complete;
                        for (const key in complete) {
                            if (complete) {
                                const value = complete[key];
                                if (key !== changedCard.elementType && !value._complete) {
                                    isComplete = false;
                                }
                            }
                        }
                        this.change.emit({
                            card: changedCard,
                            elements: this.elements,
                            type: changedCard.elementType,
                            complete: isComplete,
                            element: element
                        });
                        if (isComplete) {
                            this.complete.emit({
                                card: changedCard,
                                elements: this.elements,
                                type: changedCard.elementType,
                                complete: isComplete,
                                element: element
                            });
                        }
                        if (changedCard.error) {
                            this.error.emit(changedCard.error);
                        }
                    });
                    this.elements = [...this.elements, element];
                }
            }
        });
    }
    getCard() {
        return this.cardElement;
    }
};
StripeCardComponent.ctorParameters = () => [
    { type: StripeService }
];
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], StripeCardComponent.prototype, "options", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], StripeCardComponent.prototype, "elementsOptions", null);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], StripeCardComponent.prototype, "change", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], StripeCardComponent.prototype, "complete", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], StripeCardComponent.prototype, "error", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array)
], StripeCardComponent.prototype, "elementTypes", void 0);
tslib_1.__decorate([
    ViewChild('card', { static: false }),
    tslib_1.__metadata("design:type", ElementRef)
], StripeCardComponent.prototype, "card", void 0);
StripeCardComponent = tslib_1.__decorate([
    Component({
        selector: 'ngx-stripe-card',
        template: `
    <div class="field" #card>
      <div [class]="type" *ngFor="let type of elementTypes"></div>
    </div>
  `
    }),
    tslib_1.__metadata("design:paramtypes", [StripeService])
], StripeCardComponent);
export { StripeCardComponent };
//# sourceMappingURL=data:application/json;base64,