(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@nomadreservations/ngx-stripe/projects/ngx-stripe', ['exports', '@angular/core', '@angular/common', 'rxjs', 'rxjs/operators'], factory) :
    (global = global || self, factory((global.nomadreservations = global.nomadreservations || {}, global.nomadreservations['ngx-stripe'] = global.nomadreservations['ngx-stripe'] || {}, global.nomadreservations['ngx-stripe'].projects = global.nomadreservations['ngx-stripe'].projects || {}, global.nomadreservations['ngx-stripe'].projects['ngx-stripe'] = {}), global.ng.core, global.ng.common, global.rxjs, global.rxjs.operators));
}(this, function (exports, core, common, rxjs, operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function isSourceData(sourceData) {
        return 'type' in sourceData;
    }

    var STRIPE_PUBLISHABLE_KEY = new core.InjectionToken('Stripe Publishable Key');
    var STRIPE_OPTIONS = new core.InjectionToken('Stripe Options');

    function isBankAccount(account) {
        return account === 'bank_account';
    }
    function isBankAccountData(bankAccountData) {
        return ('country' in bankAccountData &&
            'currency' in bankAccountData &&
            'routing_number' in bankAccountData &&
            'account_number' in bankAccountData &&
            'account_holder_name' in bankAccountData &&
            'account_holder_type' in bankAccountData &&
            (bankAccountData.account_holder_type === 'individual' || bankAccountData.account_holder_type === 'company'));
    }
    function isPii(pii) {
        return pii === 'pii';
    }
    function isPiiData(piiData) {
        return 'personal_id_number' in piiData;
    }

    var PlatformService = /** @class */ (function () {
        function PlatformService(platformId) {
            this.platformId = platformId;
        }
        Object.defineProperty(PlatformService.prototype, "isBrowser", {
            get: function () {
                return common.isPlatformBrowser(this.platformId);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlatformService.prototype, "isServer", {
            get: function () {
                return common.isPlatformServer(this.platformId);
            },
            enumerable: true,
            configurable: true
        });
        PlatformService.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
        ]; };
        PlatformService = __decorate([
            core.Injectable(),
            __param(0, core.Inject(core.PLATFORM_ID)),
            __metadata("design:paramtypes", [Object])
        ], PlatformService);
        return PlatformService;
    }());

    var DocumentRef = /** @class */ (function () {
        function DocumentRef(_platform) {
            this._platform = _platform;
        }
        DocumentRef.prototype.getNativeDocument = function () {
            if (this._platform.isBrowser) {
                return document;
            }
            return {};
        };
        DocumentRef.ctorParameters = function () { return [
            { type: PlatformService }
        ]; };
        DocumentRef = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [PlatformService])
        ], DocumentRef);
        return DocumentRef;
    }());

    var WindowRef = /** @class */ (function () {
        function WindowRef(_platform) {
            this._platform = _platform;
        }
        WindowRef.prototype.getNativeWindow = function () {
            if (this._platform.isBrowser) {
                return window;
            }
            return {};
        };
        WindowRef.ctorParameters = function () { return [
            { type: PlatformService }
        ]; };
        WindowRef = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [PlatformService])
        ], WindowRef);
        return WindowRef;
    }());

    var LazyStripeAPILoader = /** @class */ (function () {
        function LazyStripeAPILoader(window, document, _platform) {
            this.window = window;
            this.document = document;
            this._platform = _platform;
            this.status = new rxjs.BehaviorSubject({
                error: false,
                loaded: false,
                loading: false
            });
        }
        LazyStripeAPILoader.prototype.asStream = function () {
            this.load();
            return this.status.asObservable();
        };
        LazyStripeAPILoader.prototype.isReady = function () {
            return this.status.getValue().loaded;
        };
        LazyStripeAPILoader.prototype.load = function () {
            var _this = this;
            if (this._platform.isServer) {
                return;
            }
            if (this.window.getNativeWindow().hasOwnProperty('Stripe')) {
                this.status.next({
                    error: false,
                    loaded: true,
                    loading: false
                });
            }
            else {
                if (!this.status.getValue().loaded && !this.status.getValue().loading) {
                    this.status.next(__assign({}, this.status.getValue(), { loading: true }));
                    var script = this.document
                        .getNativeDocument()
                        .createElement('script');
                    script.type = 'text/javascript';
                    script.async = true;
                    script.defer = true;
                    script.src = 'https://js.stripe.com/v3/';
                    script.onload = function () {
                        _this.status.next({
                            error: false,
                            loaded: true,
                            loading: false
                        });
                    };
                    script.onerror = function () {
                        _this.status.next({
                            error: true,
                            loaded: false,
                            loading: false
                        });
                    };
                    this.document.getNativeDocument().body.appendChild(script);
                }
            }
        };
        LazyStripeAPILoader.ctorParameters = function () { return [
            { type: WindowRef },
            { type: DocumentRef },
            { type: PlatformService }
        ]; };
        LazyStripeAPILoader = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [WindowRef,
                DocumentRef,
                PlatformService])
        ], LazyStripeAPILoader);
        return LazyStripeAPILoader;
    }());

    var StripeService = /** @class */ (function () {
        function StripeService(key, options, loader, window, _platform) {
            this.key = key;
            this.options = options;
            this.loader = loader;
            this.window = window;
            this._platform = _platform;
            this.stripeChanged$ = new rxjs.ReplaySubject();
            this.stripe = {};
            this.changeKey(this.key, this.options)
                .pipe(operators.take(1))
                .subscribe(function () { });
        }
        StripeService.prototype.changeKey = function (key, options) {
            var _this = this;
            var obs = this.loader.asStream().pipe(operators.filter(function (status) { return status.loaded === true; }), operators.map(function () {
                if (!_this.window.getNativeWindow()) {
                    return;
                }
                var Stripe = _this.window.getNativeWindow().Stripe;
                if (key) {
                    _this.stripe = options ? Stripe(key, options) : Stripe(key);
                    _this.stripeChanged$.next(_this.stripe);
                }
                return _this.stripe;
            }), operators.publishLast(), operators.refCount());
            obs.subscribe();
            return obs;
        };
        StripeService.prototype.elements = function (options) {
            var _this = this;
            return this.stripeChanged$.pipe(operators.map(function () { return _this.stripe.elements(options); }));
        };
        StripeService.prototype.createToken = function (a, b) {
            if (isBankAccount(a) && isBankAccountData(b)) {
                return rxjs.from(this.stripe.createToken(a, b));
            }
            else if (isPii(a) && isPiiData(b)) {
                return rxjs.from(this.stripe.createToken(a, b));
            }
            else {
                return rxjs.from(this.stripe.createToken(a, b));
            }
        };
        StripeService.prototype.paymentRequest = function (options) {
            var _this = this;
            return this.stripeChanged$.pipe(operators.map(function () { return _this.stripe.paymentRequest(options); }));
        };
        StripeService.prototype.handleCardSetup = function (clientSecret, element, cardSetupOptions) {
            return rxjs.from(this.stripe.handleCardSetup(clientSecret, element, cardSetupOptions));
        };
        StripeService.prototype.handleCardPayment = function (clientSecret, element, cardSetupOptions) {
            return rxjs.from(this.stripe.handleCardPayment(clientSecret, element, cardSetupOptions));
        };
        StripeService.prototype.handleCardAction = function (clientSecret) {
            return rxjs.from(this.stripe.handleCardAction(clientSecret));
        };
        StripeService.prototype.confirmPaymentIntent = function (clientSecret, element, intentOptions) {
            return rxjs.from(this.stripe.confirmPaymentIntent(clientSecret, element, intentOptions));
        };
        StripeService.prototype.confirmCardPayment = function (clientSecret, data, options) {
            return rxjs.from(this.stripe.confirmCardPayment(clientSecret, data, options));
        };
        StripeService.prototype.retrievePaymentIntent = function (clientSecret) {
            return rxjs.from(this.stripe.retrievePaymentIntent(clientSecret));
        };
        StripeService.prototype.retrieveSetupIntent = function (clientSecret) {
            return rxjs.from(this.stripe.retrieveSetupIntent(clientSecret));
        };
        StripeService.prototype.confirmSetupIntent = function (clientSecret, element, intentOptions) {
            return rxjs.from(this.stripe.confirmSetupIntent(clientSecret, element, intentOptions));
        };
        StripeService.prototype.createSource = function (a, b) {
            if (isSourceData(a)) {
                return rxjs.from(this.stripe.createSource(a));
            }
            return rxjs.from(this.stripe.createSource(a, b));
        };
        StripeService.prototype.retrieveSource = function (source) {
            return rxjs.from(this.stripe.retrieveSource(source));
        };
        StripeService.prototype.createPaymentMethod = function (paymentMethod) {
            return rxjs.from(this.stripe.createPaymentMethod(paymentMethod));
        };
        StripeService.ctorParameters = function () { return [
            { type: String, decorators: [{ type: core.Inject, args: [STRIPE_PUBLISHABLE_KEY,] }] },
            { type: undefined, decorators: [{ type: core.Inject, args: [STRIPE_OPTIONS,] }] },
            { type: LazyStripeAPILoader },
            { type: WindowRef },
            { type: PlatformService }
        ]; };
        StripeService = __decorate([
            core.Injectable(),
            __param(0, core.Inject(STRIPE_PUBLISHABLE_KEY)),
            __param(1, core.Inject(STRIPE_OPTIONS)),
            __metadata("design:paramtypes", [String, Object, LazyStripeAPILoader,
                WindowRef,
                PlatformService])
        ], StripeService);
        return StripeService;
    }());

    var PaymentRequestComponent = /** @class */ (function () {
        function PaymentRequestComponent(stripeService) {
            this.stripeService = stripeService;
            this.change = new core.EventEmitter();
            this.shippingAddressChange = new core.EventEmitter();
            this.shippingOptionChange = new core.EventEmitter();
            this.cancel = new core.EventEmitter();
            this.hide = false;
            this.styles$ = new rxjs.BehaviorSubject({});
            this.options$ = new rxjs.ReplaySubject();
            this.elementsOptions$ = new rxjs.BehaviorSubject({});
            this.complete$ = new rxjs.Subject();
            this._attached = false;
            this._opened = false;
        }
        Object.defineProperty(PaymentRequestComponent.prototype, "options", {
            set: function (optionsIn) {
                this.options$.next(optionsIn);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PaymentRequestComponent.prototype, "elementsOptions", {
            set: function (optionsIn) {
                this.elementsOptions$.next(optionsIn);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PaymentRequestComponent.prototype, "styles", {
            set: function (optionsIn) {
                this.styles$.next(optionsIn);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PaymentRequestComponent.prototype, "complete", {
            set: function (success) {
                this.complete$.next(success);
            },
            enumerable: true,
            configurable: true
        });
        PaymentRequestComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.elements$ = this.elementsOptions$.asObservable().pipe(operators.switchMap(function (options) {
                return _this.stripeService.elements(options);
            }));
            this.request$ = this.options$.asObservable().pipe(operators.switchMap(function (options) {
                return _this.stripeService.paymentRequest(options);
            }));
            this.complete$.subscribe(function (complete) {
                if (_this.lastEvent) {
                    if (complete) {
                        _this.lastEvent.complete('success');
                    }
                    else {
                        _this.lastEvent.complete('fail');
                    }
                }
            });
        };
        PaymentRequestComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            rxjs.combineLatest(this.request$, this.elements$, this.options$, this.styles$).subscribe(function (_a) {
                var _b = __read(_a, 4), paymentRequest = _b[0], elements = _b[1], options = _b[2], styles = _b[3];
                if (_this.requestButton && !_this._attached) {
                    _this._paymentRequest = paymentRequest;
                    _this._attached = true;
                    var element_1 = elements.create('paymentRequestButton', {
                        paymentRequest: paymentRequest,
                        style: {
                            paymentRequestButton: __assign({}, styles)
                        }
                    });
                    _this.hide = false;
                    paymentRequest.canMakePayment().then(function (result) {
                        if (result) {
                            element_1.mount(_this.requestButton.nativeElement);
                        }
                        else {
                            _this.hide = true;
                        }
                    });
                    paymentRequest.on('shippingaddresschange', function (event) {
                        _this.shippingAddressChange.emit(event);
                    });
                    paymentRequest.on('shippingoptionchange', function (event) {
                        _this.shippingOptionChange.emit(event);
                    });
                    paymentRequest.on('token', function (event) {
                        _this.change.emit(event);
                        _this._opened = false;
                    });
                    paymentRequest.on('paymentmethod', function (event) {
                        _this.change.emit(event);
                    });
                    paymentRequest.on('source', function (event) {
                        _this.change.emit(event);
                    });
                    paymentRequest.on('cancel', function (event) {
                        _this.cancel.emit(event);
                        _this._opened = false;
                    });
                    paymentRequest.on('click', function () {
                        _this._opened = true;
                    });
                }
                else if (_this._attached && !_this._opened) {
                    _this._paymentRequest.update({
                        currency: options.currency,
                        total: options.total,
                        displayItems: options.displayItems,
                        shippingOptions: options.shippingOptions
                    });
                }
            });
        };
        PaymentRequestComponent.ctorParameters = function () { return [
            { type: StripeService }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PaymentRequestComponent.prototype, "options", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PaymentRequestComponent.prototype, "elementsOptions", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], PaymentRequestComponent.prototype, "styles", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Boolean),
            __metadata("design:paramtypes", [Boolean])
        ], PaymentRequestComponent.prototype, "complete", null);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PaymentRequestComponent.prototype, "change", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PaymentRequestComponent.prototype, "shippingAddressChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PaymentRequestComponent.prototype, "shippingOptionChange", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], PaymentRequestComponent.prototype, "cancel", void 0);
        __decorate([
            core.ViewChild('request', { static: false }),
            __metadata("design:type", core.ElementRef)
        ], PaymentRequestComponent.prototype, "requestButton", void 0);
        PaymentRequestComponent = __decorate([
            core.Component({
                selector: 'ngx-payment-request',
                template: '<div #request [style.display-none]="hide"></div>'
            }),
            __metadata("design:paramtypes", [StripeService])
        ], PaymentRequestComponent);
        return PaymentRequestComponent;
    }());

    var StripeCardComponent = /** @class */ (function () {
        function StripeCardComponent(stripeService) {
            this.stripeService = stripeService;
            this.change = new core.EventEmitter();
            this.complete = new core.EventEmitter();
            this.error = new core.EventEmitter();
            this.elementTypes = ['card'];
            this.options$ = new rxjs.BehaviorSubject({});
            this.elementsOptions$ = new rxjs.BehaviorSubject({});
        }
        Object.defineProperty(StripeCardComponent.prototype, "options", {
            set: function (optionsIn) {
                this.options$.next(optionsIn);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(StripeCardComponent.prototype, "elementsOptions", {
            set: function (optionsIn) {
                this.elementsOptions$.next(optionsIn);
            },
            enumerable: true,
            configurable: true
        });
        StripeCardComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            var elements$ = this.elementsOptions$.asObservable().pipe(operators.switchMap(function (options) {
                if (Object.keys(options).length > 0) {
                    return _this.stripeService.elements(options);
                }
                return _this.stripeService.elements();
            }));
            var complete = {};
            rxjs.combineLatest(elements$, this.options$.asObservable().pipe(operators.filter(function (options) { return Boolean(options); }))).subscribe(function (_a) {
                var e_1, _b;
                var _c = __read(_a, 2), elements = _c[0], options = _c[1];
                _this.elements = [];
                if (_this.card) {
                    var _loop_1 = function (type) {
                        var _a;
                        var element = elements.create(type, options);
                        complete = __assign({}, complete, (_a = {}, _a[type] = element, _a));
                        if (['card', 'cardNumber'].indexOf(type) !== -1) {
                            _this.cardElement = element;
                        }
                        var mountTo = _this.card.nativeElement.querySelector("." + type);
                        element.mount(mountTo);
                        element.on('change', function (changedCard) {
                            var isComplete = changedCard.complete;
                            for (var key in complete) {
                                if (complete) {
                                    var value = complete[key];
                                    if (key !== changedCard.elementType && !value._complete) {
                                        isComplete = false;
                                    }
                                }
                            }
                            _this.change.emit({
                                card: changedCard,
                                elements: _this.elements,
                                type: changedCard.elementType,
                                complete: isComplete,
                                element: element
                            });
                            if (isComplete) {
                                _this.complete.emit({
                                    card: changedCard,
                                    elements: _this.elements,
                                    type: changedCard.elementType,
                                    complete: isComplete,
                                    element: element
                                });
                            }
                            if (changedCard.error) {
                                _this.error.emit(changedCard.error);
                            }
                        });
                        _this.elements = __spread(_this.elements, [element]);
                    };
                    try {
                        for (var _d = __values(_this.elementTypes), _e = _d.next(); !_e.done; _e = _d.next()) {
                            var type = _e.value;
                            _loop_1(type);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
            });
        };
        StripeCardComponent.prototype.getCard = function () {
            return this.cardElement;
        };
        StripeCardComponent.ctorParameters = function () { return [
            { type: StripeService }
        ]; };
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], StripeCardComponent.prototype, "options", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], StripeCardComponent.prototype, "elementsOptions", null);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], StripeCardComponent.prototype, "change", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], StripeCardComponent.prototype, "complete", void 0);
        __decorate([
            core.Output(),
            __metadata("design:type", Object)
        ], StripeCardComponent.prototype, "error", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", Array)
        ], StripeCardComponent.prototype, "elementTypes", void 0);
        __decorate([
            core.ViewChild('card', { static: false }),
            __metadata("design:type", core.ElementRef)
        ], StripeCardComponent.prototype, "card", void 0);
        StripeCardComponent = __decorate([
            core.Component({
                selector: 'ngx-stripe-card',
                template: "\n    <div class=\"field\" #card>\n      <div [class]=\"type\" *ngFor=\"let type of elementTypes\"></div>\n    </div>\n  "
            }),
            __metadata("design:paramtypes", [StripeService])
        ], StripeCardComponent);
        return StripeCardComponent;
    }());

    var NgxStripeModule = /** @class */ (function () {
        function NgxStripeModule() {
        }
        NgxStripeModule_1 = NgxStripeModule;
        NgxStripeModule.forRoot = function (publishableKey, options) {
            return {
                ngModule: NgxStripeModule_1,
                providers: [
                    LazyStripeAPILoader,
                    StripeService,
                    PlatformService,
                    WindowRef,
                    DocumentRef,
                    {
                        provide: STRIPE_PUBLISHABLE_KEY,
                        useValue: publishableKey
                    },
                    {
                        provide: STRIPE_OPTIONS,
                        useValue: options
                    }
                ]
            };
        };
        var NgxStripeModule_1;
        NgxStripeModule = NgxStripeModule_1 = __decorate([
            core.NgModule({
                imports: [common.CommonModule],
                declarations: [StripeCardComponent, PaymentRequestComponent],
                exports: [StripeCardComponent, PaymentRequestComponent]
            })
        ], NgxStripeModule);
        return NgxStripeModule;
    }());

    exports.DocumentRef = DocumentRef;
    exports.LazyStripeAPILoader = LazyStripeAPILoader;
    exports.NgxStripeModule = NgxStripeModule;
    exports.PlatformService = PlatformService;
    exports.STRIPE_OPTIONS = STRIPE_OPTIONS;
    exports.STRIPE_PUBLISHABLE_KEY = STRIPE_PUBLISHABLE_KEY;
    exports.StripeCardComponent = StripeCardComponent;
    exports.StripeService = StripeService;
    exports.WindowRef = WindowRef;
    exports.isBankAccount = isBankAccount;
    exports.isBankAccountData = isBankAccountData;
    exports.isPii = isPii;
    exports.isPiiData = isPiiData;
    exports.isSourceData = isSourceData;
    exports.ɵa = PaymentRequestComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=nomadreservations-ngx-stripe-projects-ngx-stripe.umd.js.map
