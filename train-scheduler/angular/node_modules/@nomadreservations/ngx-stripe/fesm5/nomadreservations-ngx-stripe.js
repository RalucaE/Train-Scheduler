import { InjectionToken, Inject, PLATFORM_ID, Injectable, EventEmitter, Input, Output, ViewChild, ElementRef, Component, NgModule } from '@angular/core';
import { __decorate, __param, __metadata, __assign, __read, __spread, __values } from 'tslib';
import { isPlatformBrowser, isPlatformServer, CommonModule } from '@angular/common';
import { BehaviorSubject, ReplaySubject, from, Subject, combineLatest } from 'rxjs';
import { take, filter, map, publishLast, refCount, switchMap } from 'rxjs/operators';

function isSourceData(sourceData) {
    return 'type' in sourceData;
}

var STRIPE_PUBLISHABLE_KEY = new InjectionToken('Stripe Publishable Key');
var STRIPE_OPTIONS = new InjectionToken('Stripe Options');

function isBankAccount(account) {
    return account === 'bank_account';
}
function isBankAccountData(bankAccountData) {
    return ('country' in bankAccountData &&
        'currency' in bankAccountData &&
        'routing_number' in bankAccountData &&
        'account_number' in bankAccountData &&
        'account_holder_name' in bankAccountData &&
        'account_holder_type' in bankAccountData &&
        (bankAccountData.account_holder_type === 'individual' || bankAccountData.account_holder_type === 'company'));
}
function isPii(pii) {
    return pii === 'pii';
}
function isPiiData(piiData) {
    return 'personal_id_number' in piiData;
}

var PlatformService = /** @class */ (function () {
    function PlatformService(platformId) {
        this.platformId = platformId;
    }
    Object.defineProperty(PlatformService.prototype, "isBrowser", {
        get: function () {
            return isPlatformBrowser(this.platformId);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlatformService.prototype, "isServer", {
        get: function () {
            return isPlatformServer(this.platformId);
        },
        enumerable: true,
        configurable: true
    });
    PlatformService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    PlatformService = __decorate([
        Injectable(),
        __param(0, Inject(PLATFORM_ID)),
        __metadata("design:paramtypes", [Object])
    ], PlatformService);
    return PlatformService;
}());

var DocumentRef = /** @class */ (function () {
    function DocumentRef(_platform) {
        this._platform = _platform;
    }
    DocumentRef.prototype.getNativeDocument = function () {
        if (this._platform.isBrowser) {
            return document;
        }
        return {};
    };
    DocumentRef.ctorParameters = function () { return [
        { type: PlatformService }
    ]; };
    DocumentRef = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [PlatformService])
    ], DocumentRef);
    return DocumentRef;
}());

var WindowRef = /** @class */ (function () {
    function WindowRef(_platform) {
        this._platform = _platform;
    }
    WindowRef.prototype.getNativeWindow = function () {
        if (this._platform.isBrowser) {
            return window;
        }
        return {};
    };
    WindowRef.ctorParameters = function () { return [
        { type: PlatformService }
    ]; };
    WindowRef = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [PlatformService])
    ], WindowRef);
    return WindowRef;
}());

var LazyStripeAPILoader = /** @class */ (function () {
    function LazyStripeAPILoader(window, document, _platform) {
        this.window = window;
        this.document = document;
        this._platform = _platform;
        this.status = new BehaviorSubject({
            error: false,
            loaded: false,
            loading: false
        });
    }
    LazyStripeAPILoader.prototype.asStream = function () {
        this.load();
        return this.status.asObservable();
    };
    LazyStripeAPILoader.prototype.isReady = function () {
        return this.status.getValue().loaded;
    };
    LazyStripeAPILoader.prototype.load = function () {
        var _this = this;
        if (this._platform.isServer) {
            return;
        }
        if (this.window.getNativeWindow().hasOwnProperty('Stripe')) {
            this.status.next({
                error: false,
                loaded: true,
                loading: false
            });
        }
        else {
            if (!this.status.getValue().loaded && !this.status.getValue().loading) {
                this.status.next(__assign({}, this.status.getValue(), { loading: true }));
                var script = this.document
                    .getNativeDocument()
                    .createElement('script');
                script.type = 'text/javascript';
                script.async = true;
                script.defer = true;
                script.src = 'https://js.stripe.com/v3/';
                script.onload = function () {
                    _this.status.next({
                        error: false,
                        loaded: true,
                        loading: false
                    });
                };
                script.onerror = function () {
                    _this.status.next({
                        error: true,
                        loaded: false,
                        loading: false
                    });
                };
                this.document.getNativeDocument().body.appendChild(script);
            }
        }
    };
    LazyStripeAPILoader.ctorParameters = function () { return [
        { type: WindowRef },
        { type: DocumentRef },
        { type: PlatformService }
    ]; };
    LazyStripeAPILoader = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [WindowRef,
            DocumentRef,
            PlatformService])
    ], LazyStripeAPILoader);
    return LazyStripeAPILoader;
}());

var StripeService = /** @class */ (function () {
    function StripeService(key, options, loader, window, _platform) {
        this.key = key;
        this.options = options;
        this.loader = loader;
        this.window = window;
        this._platform = _platform;
        this.stripeChanged$ = new ReplaySubject();
        this.stripe = {};
        this.changeKey(this.key, this.options)
            .pipe(take(1))
            .subscribe(function () { });
    }
    StripeService.prototype.changeKey = function (key, options) {
        var _this = this;
        var obs = this.loader.asStream().pipe(filter(function (status) { return status.loaded === true; }), map(function () {
            if (!_this.window.getNativeWindow()) {
                return;
            }
            var Stripe = _this.window.getNativeWindow().Stripe;
            if (key) {
                _this.stripe = options ? Stripe(key, options) : Stripe(key);
                _this.stripeChanged$.next(_this.stripe);
            }
            return _this.stripe;
        }), publishLast(), refCount());
        obs.subscribe();
        return obs;
    };
    StripeService.prototype.elements = function (options) {
        var _this = this;
        return this.stripeChanged$.pipe(map(function () { return _this.stripe.elements(options); }));
    };
    StripeService.prototype.createToken = function (a, b) {
        if (isBankAccount(a) && isBankAccountData(b)) {
            return from(this.stripe.createToken(a, b));
        }
        else if (isPii(a) && isPiiData(b)) {
            return from(this.stripe.createToken(a, b));
        }
        else {
            return from(this.stripe.createToken(a, b));
        }
    };
    StripeService.prototype.paymentRequest = function (options) {
        var _this = this;
        return this.stripeChanged$.pipe(map(function () { return _this.stripe.paymentRequest(options); }));
    };
    StripeService.prototype.handleCardSetup = function (clientSecret, element, cardSetupOptions) {
        return from(this.stripe.handleCardSetup(clientSecret, element, cardSetupOptions));
    };
    StripeService.prototype.handleCardPayment = function (clientSecret, element, cardSetupOptions) {
        return from(this.stripe.handleCardPayment(clientSecret, element, cardSetupOptions));
    };
    StripeService.prototype.handleCardAction = function (clientSecret) {
        return from(this.stripe.handleCardAction(clientSecret));
    };
    StripeService.prototype.confirmPaymentIntent = function (clientSecret, element, intentOptions) {
        return from(this.stripe.confirmPaymentIntent(clientSecret, element, intentOptions));
    };
    StripeService.prototype.confirmCardPayment = function (clientSecret, data, options) {
        return from(this.stripe.confirmCardPayment(clientSecret, data, options));
    };
    StripeService.prototype.retrievePaymentIntent = function (clientSecret) {
        return from(this.stripe.retrievePaymentIntent(clientSecret));
    };
    StripeService.prototype.retrieveSetupIntent = function (clientSecret) {
        return from(this.stripe.retrieveSetupIntent(clientSecret));
    };
    StripeService.prototype.confirmSetupIntent = function (clientSecret, element, intentOptions) {
        return from(this.stripe.confirmSetupIntent(clientSecret, element, intentOptions));
    };
    StripeService.prototype.createSource = function (a, b) {
        if (isSourceData(a)) {
            return from(this.stripe.createSource(a));
        }
        return from(this.stripe.createSource(a, b));
    };
    StripeService.prototype.retrieveSource = function (source) {
        return from(this.stripe.retrieveSource(source));
    };
    StripeService.prototype.createPaymentMethod = function (paymentMethod) {
        return from(this.stripe.createPaymentMethod(paymentMethod));
    };
    StripeService.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [STRIPE_PUBLISHABLE_KEY,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [STRIPE_OPTIONS,] }] },
        { type: LazyStripeAPILoader },
        { type: WindowRef },
        { type: PlatformService }
    ]; };
    StripeService = __decorate([
        Injectable(),
        __param(0, Inject(STRIPE_PUBLISHABLE_KEY)),
        __param(1, Inject(STRIPE_OPTIONS)),
        __metadata("design:paramtypes", [String, Object, LazyStripeAPILoader,
            WindowRef,
            PlatformService])
    ], StripeService);
    return StripeService;
}());

var PaymentRequestComponent = /** @class */ (function () {
    function PaymentRequestComponent(stripeService) {
        this.stripeService = stripeService;
        this.change = new EventEmitter();
        this.shippingAddressChange = new EventEmitter();
        this.shippingOptionChange = new EventEmitter();
        this.cancel = new EventEmitter();
        this.hide = false;
        this.styles$ = new BehaviorSubject({});
        this.options$ = new ReplaySubject();
        this.elementsOptions$ = new BehaviorSubject({});
        this.complete$ = new Subject();
        this._attached = false;
        this._opened = false;
    }
    Object.defineProperty(PaymentRequestComponent.prototype, "options", {
        set: function (optionsIn) {
            this.options$.next(optionsIn);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaymentRequestComponent.prototype, "elementsOptions", {
        set: function (optionsIn) {
            this.elementsOptions$.next(optionsIn);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaymentRequestComponent.prototype, "styles", {
        set: function (optionsIn) {
            this.styles$.next(optionsIn);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaymentRequestComponent.prototype, "complete", {
        set: function (success) {
            this.complete$.next(success);
        },
        enumerable: true,
        configurable: true
    });
    PaymentRequestComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.elements$ = this.elementsOptions$.asObservable().pipe(switchMap(function (options) {
            return _this.stripeService.elements(options);
        }));
        this.request$ = this.options$.asObservable().pipe(switchMap(function (options) {
            return _this.stripeService.paymentRequest(options);
        }));
        this.complete$.subscribe(function (complete) {
            if (_this.lastEvent) {
                if (complete) {
                    _this.lastEvent.complete('success');
                }
                else {
                    _this.lastEvent.complete('fail');
                }
            }
        });
    };
    PaymentRequestComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        combineLatest(this.request$, this.elements$, this.options$, this.styles$).subscribe(function (_a) {
            var _b = __read(_a, 4), paymentRequest = _b[0], elements = _b[1], options = _b[2], styles = _b[3];
            if (_this.requestButton && !_this._attached) {
                _this._paymentRequest = paymentRequest;
                _this._attached = true;
                var element_1 = elements.create('paymentRequestButton', {
                    paymentRequest: paymentRequest,
                    style: {
                        paymentRequestButton: __assign({}, styles)
                    }
                });
                _this.hide = false;
                paymentRequest.canMakePayment().then(function (result) {
                    if (result) {
                        element_1.mount(_this.requestButton.nativeElement);
                    }
                    else {
                        _this.hide = true;
                    }
                });
                paymentRequest.on('shippingaddresschange', function (event) {
                    _this.shippingAddressChange.emit(event);
                });
                paymentRequest.on('shippingoptionchange', function (event) {
                    _this.shippingOptionChange.emit(event);
                });
                paymentRequest.on('token', function (event) {
                    _this.change.emit(event);
                    _this._opened = false;
                });
                paymentRequest.on('paymentmethod', function (event) {
                    _this.change.emit(event);
                });
                paymentRequest.on('source', function (event) {
                    _this.change.emit(event);
                });
                paymentRequest.on('cancel', function (event) {
                    _this.cancel.emit(event);
                    _this._opened = false;
                });
                paymentRequest.on('click', function () {
                    _this._opened = true;
                });
            }
            else if (_this._attached && !_this._opened) {
                _this._paymentRequest.update({
                    currency: options.currency,
                    total: options.total,
                    displayItems: options.displayItems,
                    shippingOptions: options.shippingOptions
                });
            }
        });
    };
    PaymentRequestComponent.ctorParameters = function () { return [
        { type: StripeService }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], PaymentRequestComponent.prototype, "options", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], PaymentRequestComponent.prototype, "elementsOptions", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], PaymentRequestComponent.prototype, "styles", null);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], PaymentRequestComponent.prototype, "complete", null);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], PaymentRequestComponent.prototype, "change", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], PaymentRequestComponent.prototype, "shippingAddressChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], PaymentRequestComponent.prototype, "shippingOptionChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], PaymentRequestComponent.prototype, "cancel", void 0);
    __decorate([
        ViewChild('request', { static: false }),
        __metadata("design:type", ElementRef)
    ], PaymentRequestComponent.prototype, "requestButton", void 0);
    PaymentRequestComponent = __decorate([
        Component({
            selector: 'ngx-payment-request',
            template: '<div #request [style.display-none]="hide"></div>'
        }),
        __metadata("design:paramtypes", [StripeService])
    ], PaymentRequestComponent);
    return PaymentRequestComponent;
}());

var StripeCardComponent = /** @class */ (function () {
    function StripeCardComponent(stripeService) {
        this.stripeService = stripeService;
        this.change = new EventEmitter();
        this.complete = new EventEmitter();
        this.error = new EventEmitter();
        this.elementTypes = ['card'];
        this.options$ = new BehaviorSubject({});
        this.elementsOptions$ = new BehaviorSubject({});
    }
    Object.defineProperty(StripeCardComponent.prototype, "options", {
        set: function (optionsIn) {
            this.options$.next(optionsIn);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StripeCardComponent.prototype, "elementsOptions", {
        set: function (optionsIn) {
            this.elementsOptions$.next(optionsIn);
        },
        enumerable: true,
        configurable: true
    });
    StripeCardComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        var elements$ = this.elementsOptions$.asObservable().pipe(switchMap(function (options) {
            if (Object.keys(options).length > 0) {
                return _this.stripeService.elements(options);
            }
            return _this.stripeService.elements();
        }));
        var complete = {};
        combineLatest(elements$, this.options$.asObservable().pipe(filter(function (options) { return Boolean(options); }))).subscribe(function (_a) {
            var e_1, _b;
            var _c = __read(_a, 2), elements = _c[0], options = _c[1];
            _this.elements = [];
            if (_this.card) {
                var _loop_1 = function (type) {
                    var _a;
                    var element = elements.create(type, options);
                    complete = __assign({}, complete, (_a = {}, _a[type] = element, _a));
                    if (['card', 'cardNumber'].indexOf(type) !== -1) {
                        _this.cardElement = element;
                    }
                    var mountTo = _this.card.nativeElement.querySelector("." + type);
                    element.mount(mountTo);
                    element.on('change', function (changedCard) {
                        var isComplete = changedCard.complete;
                        for (var key in complete) {
                            if (complete) {
                                var value = complete[key];
                                if (key !== changedCard.elementType && !value._complete) {
                                    isComplete = false;
                                }
                            }
                        }
                        _this.change.emit({
                            card: changedCard,
                            elements: _this.elements,
                            type: changedCard.elementType,
                            complete: isComplete,
                            element: element
                        });
                        if (isComplete) {
                            _this.complete.emit({
                                card: changedCard,
                                elements: _this.elements,
                                type: changedCard.elementType,
                                complete: isComplete,
                                element: element
                            });
                        }
                        if (changedCard.error) {
                            _this.error.emit(changedCard.error);
                        }
                    });
                    _this.elements = __spread(_this.elements, [element]);
                };
                try {
                    for (var _d = __values(_this.elementTypes), _e = _d.next(); !_e.done; _e = _d.next()) {
                        var type = _e.value;
                        _loop_1(type);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        });
    };
    StripeCardComponent.prototype.getCard = function () {
        return this.cardElement;
    };
    StripeCardComponent.ctorParameters = function () { return [
        { type: StripeService }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], StripeCardComponent.prototype, "options", null);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], StripeCardComponent.prototype, "elementsOptions", null);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], StripeCardComponent.prototype, "change", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], StripeCardComponent.prototype, "complete", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], StripeCardComponent.prototype, "error", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], StripeCardComponent.prototype, "elementTypes", void 0);
    __decorate([
        ViewChild('card', { static: false }),
        __metadata("design:type", ElementRef)
    ], StripeCardComponent.prototype, "card", void 0);
    StripeCardComponent = __decorate([
        Component({
            selector: 'ngx-stripe-card',
            template: "\n    <div class=\"field\" #card>\n      <div [class]=\"type\" *ngFor=\"let type of elementTypes\"></div>\n    </div>\n  "
        }),
        __metadata("design:paramtypes", [StripeService])
    ], StripeCardComponent);
    return StripeCardComponent;
}());

var NgxStripeModule = /** @class */ (function () {
    function NgxStripeModule() {
    }
    NgxStripeModule_1 = NgxStripeModule;
    NgxStripeModule.forRoot = function (publishableKey, options) {
        return {
            ngModule: NgxStripeModule_1,
            providers: [
                LazyStripeAPILoader,
                StripeService,
                PlatformService,
                WindowRef,
                DocumentRef,
                {
                    provide: STRIPE_PUBLISHABLE_KEY,
                    useValue: publishableKey
                },
                {
                    provide: STRIPE_OPTIONS,
                    useValue: options
                }
            ]
        };
    };
    var NgxStripeModule_1;
    NgxStripeModule = NgxStripeModule_1 = __decorate([
        NgModule({
            imports: [CommonModule],
            declarations: [StripeCardComponent, PaymentRequestComponent],
            exports: [StripeCardComponent, PaymentRequestComponent]
        })
    ], NgxStripeModule);
    return NgxStripeModule;
}());

/*
 * Public API Surface of ngx-stripe
 */

/**
 * Generated bundle index. Do not edit.
 */

export { DocumentRef, LazyStripeAPILoader, NgxStripeModule, PlatformService, STRIPE_OPTIONS, STRIPE_PUBLISHABLE_KEY, StripeCardComponent, StripeService, WindowRef, isBankAccount, isBankAccountData, isPii, isPiiData, isSourceData, PaymentRequestComponent as ɵa };
//# sourceMappingURL=nomadreservations-ngx-stripe.js.map
