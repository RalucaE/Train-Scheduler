import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { BehaviorSubject, combineLatest, ReplaySubject, Subject } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { StripeService } from './services/stripe.service';
var PaymentRequestComponent = /** @class */ (function () {
    function PaymentRequestComponent(stripeService) {
        this.stripeService = stripeService;
        this.change = new EventEmitter();
        this.shippingAddressChange = new EventEmitter();
        this.shippingOptionChange = new EventEmitter();
        this.cancel = new EventEmitter();
        this.hide = false;
        this.styles$ = new BehaviorSubject({});
        this.options$ = new ReplaySubject();
        this.elementsOptions$ = new BehaviorSubject({});
        this.complete$ = new Subject();
        this._attached = false;
        this._opened = false;
    }
    Object.defineProperty(PaymentRequestComponent.prototype, "options", {
        set: function (optionsIn) {
            this.options$.next(optionsIn);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaymentRequestComponent.prototype, "elementsOptions", {
        set: function (optionsIn) {
            this.elementsOptions$.next(optionsIn);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaymentRequestComponent.prototype, "styles", {
        set: function (optionsIn) {
            this.styles$.next(optionsIn);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaymentRequestComponent.prototype, "complete", {
        set: function (success) {
            this.complete$.next(success);
        },
        enumerable: true,
        configurable: true
    });
    PaymentRequestComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.elements$ = this.elementsOptions$.asObservable().pipe(switchMap(function (options) {
            return _this.stripeService.elements(options);
        }));
        this.request$ = this.options$.asObservable().pipe(switchMap(function (options) {
            return _this.stripeService.paymentRequest(options);
        }));
        this.complete$.subscribe(function (complete) {
            if (_this.lastEvent) {
                if (complete) {
                    _this.lastEvent.complete('success');
                }
                else {
                    _this.lastEvent.complete('fail');
                }
            }
        });
    };
    PaymentRequestComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        combineLatest(this.request$, this.elements$, this.options$, this.styles$).subscribe(function (_a) {
            var _b = tslib_1.__read(_a, 4), paymentRequest = _b[0], elements = _b[1], options = _b[2], styles = _b[3];
            if (_this.requestButton && !_this._attached) {
                _this._paymentRequest = paymentRequest;
                _this._attached = true;
                var element_1 = elements.create('paymentRequestButton', {
                    paymentRequest: paymentRequest,
                    style: {
                        paymentRequestButton: tslib_1.__assign({}, styles)
                    }
                });
                _this.hide = false;
                paymentRequest.canMakePayment().then(function (result) {
                    if (result) {
                        element_1.mount(_this.requestButton.nativeElement);
                    }
                    else {
                        _this.hide = true;
                    }
                });
                paymentRequest.on('shippingaddresschange', function (event) {
                    _this.shippingAddressChange.emit(event);
                });
                paymentRequest.on('shippingoptionchange', function (event) {
                    _this.shippingOptionChange.emit(event);
                });
                paymentRequest.on('token', function (event) {
                    _this.change.emit(event);
                    _this._opened = false;
                });
                paymentRequest.on('paymentmethod', function (event) {
                    _this.change.emit(event);
                });
                paymentRequest.on('source', function (event) {
                    _this.change.emit(event);
                });
                paymentRequest.on('cancel', function (event) {
                    _this.cancel.emit(event);
                    _this._opened = false;
                });
                paymentRequest.on('click', function () {
                    _this._opened = true;
                });
            }
            else if (_this._attached && !_this._opened) {
                _this._paymentRequest.update({
                    currency: options.currency,
                    total: options.total,
                    displayItems: options.displayItems,
                    shippingOptions: options.shippingOptions
                });
            }
        });
    };
    PaymentRequestComponent.ctorParameters = function () { return [
        { type: StripeService }
    ]; };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], PaymentRequestComponent.prototype, "options", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], PaymentRequestComponent.prototype, "elementsOptions", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], PaymentRequestComponent.prototype, "styles", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], PaymentRequestComponent.prototype, "complete", null);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], PaymentRequestComponent.prototype, "change", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], PaymentRequestComponent.prototype, "shippingAddressChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], PaymentRequestComponent.prototype, "shippingOptionChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], PaymentRequestComponent.prototype, "cancel", void 0);
    tslib_1.__decorate([
        ViewChild('request', { static: false }),
        tslib_1.__metadata("design:type", ElementRef)
    ], PaymentRequestComponent.prototype, "requestButton", void 0);
    PaymentRequestComponent = tslib_1.__decorate([
        Component({
            selector: 'ngx-payment-request',
            template: '<div #request [style.display-none]="hide"></div>'
        }),
        tslib_1.__metadata("design:paramtypes", [StripeService])
    ], PaymentRequestComponent);
    return PaymentRequestComponent;
}());
export { PaymentRequestComponent };
//# sourceMappingURL=data:application/json;base64,