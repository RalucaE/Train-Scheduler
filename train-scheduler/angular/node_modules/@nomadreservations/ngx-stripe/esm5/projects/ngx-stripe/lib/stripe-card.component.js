import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { BehaviorSubject, combineLatest as observableCombineLatest } from 'rxjs';
import { filter, switchMap } from 'rxjs/operators';
import { StripeService } from './services/stripe.service';
var StripeCardComponent = /** @class */ (function () {
    function StripeCardComponent(stripeService) {
        this.stripeService = stripeService;
        this.change = new EventEmitter();
        this.complete = new EventEmitter();
        this.error = new EventEmitter();
        this.elementTypes = ['card'];
        this.options$ = new BehaviorSubject({});
        this.elementsOptions$ = new BehaviorSubject({});
    }
    Object.defineProperty(StripeCardComponent.prototype, "options", {
        set: function (optionsIn) {
            this.options$.next(optionsIn);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StripeCardComponent.prototype, "elementsOptions", {
        set: function (optionsIn) {
            this.elementsOptions$.next(optionsIn);
        },
        enumerable: true,
        configurable: true
    });
    StripeCardComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        var elements$ = this.elementsOptions$.asObservable().pipe(switchMap(function (options) {
            if (Object.keys(options).length > 0) {
                return _this.stripeService.elements(options);
            }
            return _this.stripeService.elements();
        }));
        var complete = {};
        observableCombineLatest(elements$, this.options$.asObservable().pipe(filter(function (options) { return Boolean(options); }))).subscribe(function (_a) {
            var e_1, _b;
            var _c = tslib_1.__read(_a, 2), elements = _c[0], options = _c[1];
            _this.elements = [];
            if (_this.card) {
                var _loop_1 = function (type) {
                    var _a;
                    var element = elements.create(type, options);
                    complete = tslib_1.__assign({}, complete, (_a = {}, _a[type] = element, _a));
                    if (['card', 'cardNumber'].indexOf(type) !== -1) {
                        _this.cardElement = element;
                    }
                    var mountTo = _this.card.nativeElement.querySelector("." + type);
                    element.mount(mountTo);
                    element.on('change', function (changedCard) {
                        var isComplete = changedCard.complete;
                        for (var key in complete) {
                            if (complete) {
                                var value = complete[key];
                                if (key !== changedCard.elementType && !value._complete) {
                                    isComplete = false;
                                }
                            }
                        }
                        _this.change.emit({
                            card: changedCard,
                            elements: _this.elements,
                            type: changedCard.elementType,
                            complete: isComplete,
                            element: element
                        });
                        if (isComplete) {
                            _this.complete.emit({
                                card: changedCard,
                                elements: _this.elements,
                                type: changedCard.elementType,
                                complete: isComplete,
                                element: element
                            });
                        }
                        if (changedCard.error) {
                            _this.error.emit(changedCard.error);
                        }
                    });
                    _this.elements = tslib_1.__spread(_this.elements, [element]);
                };
                try {
                    for (var _d = tslib_1.__values(_this.elementTypes), _e = _d.next(); !_e.done; _e = _d.next()) {
                        var type = _e.value;
                        _loop_1(type);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        });
    };
    StripeCardComponent.prototype.getCard = function () {
        return this.cardElement;
    };
    StripeCardComponent.ctorParameters = function () { return [
        { type: StripeService }
    ]; };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], StripeCardComponent.prototype, "options", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], StripeCardComponent.prototype, "elementsOptions", null);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], StripeCardComponent.prototype, "change", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], StripeCardComponent.prototype, "complete", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], StripeCardComponent.prototype, "error", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Array)
    ], StripeCardComponent.prototype, "elementTypes", void 0);
    tslib_1.__decorate([
        ViewChild('card', { static: false }),
        tslib_1.__metadata("design:type", ElementRef)
    ], StripeCardComponent.prototype, "card", void 0);
    StripeCardComponent = tslib_1.__decorate([
        Component({
            selector: 'ngx-stripe-card',
            template: "\n    <div class=\"field\" #card>\n      <div [class]=\"type\" *ngFor=\"let type of elementTypes\"></div>\n    </div>\n  "
        }),
        tslib_1.__metadata("design:paramtypes", [StripeService])
    ], StripeCardComponent);
    return StripeCardComponent;
}());
export { StripeCardComponent };
//# sourceMappingURL=data:application/json;base64,