import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { BehaviorSubject, combineLatest, ReplaySubject, Subject } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { StripeService } from './services/stripe.service';
var PaymentRequestComponent = /** @class */ (function () {
    function PaymentRequestComponent(stripeService) {
        this.stripeService = stripeService;
        this.change = new EventEmitter();
        this.shippingAddressChange = new EventEmitter();
        this.shippingOptionChange = new EventEmitter();
        this.cancel = new EventEmitter();
        this.hide = false;
        this.styles$ = new BehaviorSubject({});
        this.options$ = new ReplaySubject();
        this.elementsOptions$ = new BehaviorSubject({});
        this.complete$ = new Subject();
        this._attached = false;
        this._opened = false;
    }
    Object.defineProperty(PaymentRequestComponent.prototype, "options", {
        set: function (optionsIn) {
            this.options$.next(optionsIn);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaymentRequestComponent.prototype, "elementsOptions", {
        set: function (optionsIn) {
            this.elementsOptions$.next(optionsIn);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaymentRequestComponent.prototype, "styles", {
        set: function (optionsIn) {
            this.styles$.next(optionsIn);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaymentRequestComponent.prototype, "complete", {
        set: function (success) {
            this.complete$.next(success);
        },
        enumerable: true,
        configurable: true
    });
    PaymentRequestComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.elements$ = this.elementsOptions$.asObservable().pipe(switchMap(function (options) {
            return _this.stripeService.elements(options);
        }));
        this.request$ = this.options$.asObservable().pipe(switchMap(function (options) {
            return _this.stripeService.paymentRequest(options);
        }));
        this.complete$.subscribe(function (complete) {
            if (_this.lastEvent) {
                if (complete) {
                    _this.lastEvent.complete('success');
                }
                else {
                    _this.lastEvent.complete('fail');
                }
            }
        });
    };
    PaymentRequestComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        combineLatest(this.request$, this.elements$, this.options$, this.styles$).subscribe(function (_a) {
            var _b = tslib_1.__read(_a, 4), paymentRequest = _b[0], elements = _b[1], options = _b[2], styles = _b[3];
            if (_this.requestButton && !_this._attached) {
                _this._paymentRequest = paymentRequest;
                _this._attached = true;
                var element_1 = elements.create('paymentRequestButton', {
                    paymentRequest: paymentRequest,
                    style: {
                        paymentRequestButton: tslib_1.__assign({}, styles)
                    }
                });
                _this.hide = false;
                paymentRequest.canMakePayment().then(function (result) {
                    if (result) {
                        element_1.mount(_this.requestButton.nativeElement);
                    }
                    else {
                        _this.hide = true;
                    }
                });
                paymentRequest.on('shippingaddresschange', function (event) {
                    _this.shippingAddressChange.emit(event);
                });
                paymentRequest.on('shippingoptionchange', function (event) {
                    _this.shippingOptionChange.emit(event);
                });
                paymentRequest.on('token', function (event) {
                    _this.change.emit(event);
                    _this._opened = false;
                });
                paymentRequest.on('paymentmethod', function (event) {
                    _this.change.emit(event);
                });
                paymentRequest.on('source', function (event) {
                    _this.change.emit(event);
                });
                paymentRequest.on('cancel', function (event) {
                    _this.cancel.emit(event);
                    _this._opened = false;
                });
                paymentRequest.on('click', function () {
                    _this._opened = true;
                });
            }
            else if (_this._attached && !_this._opened) {
                _this._paymentRequest.update({
                    currency: options.currency,
                    total: options.total,
                    displayItems: options.displayItems,
                    shippingOptions: options.shippingOptions
                });
            }
        });
    };
    PaymentRequestComponent.ctorParameters = function () { return [
        { type: StripeService }
    ]; };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], PaymentRequestComponent.prototype, "options", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], PaymentRequestComponent.prototype, "elementsOptions", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], PaymentRequestComponent.prototype, "styles", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], PaymentRequestComponent.prototype, "complete", null);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], PaymentRequestComponent.prototype, "change", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], PaymentRequestComponent.prototype, "shippingAddressChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], PaymentRequestComponent.prototype, "shippingOptionChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", Object)
    ], PaymentRequestComponent.prototype, "cancel", void 0);
    tslib_1.__decorate([
        ViewChild('request', { static: false }),
        tslib_1.__metadata("design:type", ElementRef)
    ], PaymentRequestComponent.prototype, "requestButton", void 0);
    PaymentRequestComponent = tslib_1.__decorate([
        Component({
            selector: 'ngx-payment-request',
            template: '<div #request [style.display-none]="hide"></div>'
        }),
        tslib_1.__metadata("design:paramtypes", [StripeService])
    ], PaymentRequestComponent);
    return PaymentRequestComponent;
}());
export { PaymentRequestComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5bWVudC1yZXF1ZXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bub21hZHJlc2VydmF0aW9ucy9uZ3gtc3RyaXBlL3Byb2plY3RzL25neC1zdHJpcGUvIiwic291cmNlcyI6WyJsaWIvcGF5bWVudC1yZXF1ZXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFpQixTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNySCxPQUFPLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBYyxhQUFhLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzFGLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUszQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFNMUQ7SUFxQkUsaUNBQW9CLGFBQTRCO1FBQTVCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQy9CLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFtQnRDLENBQUM7UUFDWSwwQkFBcUIsR0FBRyxJQUFJLFlBQVksRUFHckQsQ0FBQztRQUNZLHlCQUFvQixHQUFHLElBQUksWUFBWSxFQUdwRCxDQUFDO1FBQ1ksV0FBTSxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFFM0MsU0FBSSxHQUFHLEtBQUssQ0FBQztRQUdaLFlBQU8sR0FBRyxJQUFJLGVBQWUsQ0FBNEIsRUFBRSxDQUFDLENBQUM7UUFDN0QsYUFBUSxHQUFHLElBQUksYUFBYSxFQUF5QixDQUFDO1FBQ3RELHFCQUFnQixHQUFHLElBQUksZUFBZSxDQUFrQixFQUFFLENBQUMsQ0FBQztRQUU1RCxjQUFTLEdBQUcsSUFBSSxPQUFPLEVBQVcsQ0FBQztRQUNuQyxjQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ2xCLFlBQU8sR0FBRyxLQUFLLENBQUM7SUF4QzJCLENBQUM7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U0FBUyxJQUFJLENBQUMsS0FBSSxDQUFDLE9BQU8sRUFBRTtnQkFDMUMsS0FBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUM7b0JBQzFCLFFBQVEsRUFBRSxPQUFPLENBQUMsUUFBUTtvQkFDMUIsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLO29CQUNwQixZQUFZLEVBQUUsT0FBTyxDQUFDLFlBQVk7b0JBQ2xDLGVBQWUsRUFBRSxPQUFPLENBQUMsZUFBZTtpQkFDekMsQ0FBQyxDQUFDO2FBQ0o7UUFDSCxDQUFDLENBQ0YsQ0FBQztJQUNKLENBQUM7O2dCQTFIa0MsYUFBYTs7SUFuQmhEO1FBREMsS0FBSyxFQUFFOzs7MERBR1A7SUFHRDtRQURDLEtBQUssRUFBRTs7O2tFQUdQO0lBR0Q7UUFEQyxLQUFLLEVBQUU7Ozt5REFHUDtJQUdEO1FBREMsS0FBSyxFQUFFOzs7MkRBR1A7SUFHUztRQUFULE1BQU0sRUFBRTs7MkRBbUJKO0lBQ0s7UUFBVCxNQUFNLEVBQUU7OzBFQUdKO0lBQ0s7UUFBVCxNQUFNLEVBQUU7O3lFQUdKO0lBQ0s7UUFBVCxNQUFNLEVBQUU7OzJEQUF5QztJQUlUO1FBQXhDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUM7MENBQXlCLFVBQVU7a0VBQUM7SUF0RGpFLHVCQUF1QjtRQUpuQyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUscUJBQXFCO1lBQy9CLFFBQVEsRUFBRSxrREFBa0Q7U0FDN0QsQ0FBQztpREFzQm1DLGFBQWE7T0FyQnJDLHVCQUF1QixDQWdKbkM7SUFBRCw4QkFBQztDQUFBLEFBaEpELElBZ0pDO1NBaEpZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBjb21iaW5lTGF0ZXN0LCBPYnNlcnZhYmxlLCBSZXBsYXlTdWJqZWN0LCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBQYXltZW50UmVxdWVzdEJ1dHRvblN0eWxlLCBSZXF1ZXN0RWxlbWVudE9wdGlvbnMsIFVwZGF0ZURldGFpbHMgfSBmcm9tICcuL2ludGVyZmFjZXMvZWxlbWVudCc7XG5pbXBvcnQgeyBFbGVtZW50c09wdGlvbnMgfSBmcm9tICcuL2ludGVyZmFjZXMvZWxlbWVudHMnO1xuaW1wb3J0IHsgU291cmNlIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3NvdXJjZXMnO1xuaW1wb3J0IHsgU2hpcHBpbmdBZGRyZXNzLCBTaGlwcGluZ09wdGlvbnMsIFRva2VuIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3Rva2VuJztcbmltcG9ydCB7IFN0cmlwZVNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL3N0cmlwZS5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmd4LXBheW1lbnQtcmVxdWVzdCcsXG4gIHRlbXBsYXRlOiAnPGRpdiAjcmVxdWVzdCBbc3R5bGUuZGlzcGxheS1ub25lXT1cImhpZGVcIj48L2Rpdj4nXG59KVxuZXhwb3J0IGNsYXNzIFBheW1lbnRSZXF1ZXN0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcbiAgQElucHV0KClcbiAgcHJpdmF0ZSBzZXQgb3B0aW9ucyhvcHRpb25zSW46IFJlcXVlc3RFbGVtZW50T3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyQubmV4dChvcHRpb25zSW4pO1xuICB9XG5cbiAgQElucHV0KClcbiAgcHVibGljIHNldCBlbGVtZW50c09wdGlvbnMob3B0aW9uc0luOiBFbGVtZW50c09wdGlvbnMpIHtcbiAgICB0aGlzLmVsZW1lbnRzT3B0aW9ucyQubmV4dChvcHRpb25zSW4pO1xuICB9XG5cbiAgQElucHV0KClcbiAgcHVibGljIHNldCBzdHlsZXMob3B0aW9uc0luOiBQYXltZW50UmVxdWVzdEJ1dHRvblN0eWxlKSB7XG4gICAgdGhpcy5zdHlsZXMkLm5leHQob3B0aW9uc0luKTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzZXQgY29tcGxldGUoc3VjY2VzczogYm9vbGVhbikge1xuICAgIHRoaXMuY29tcGxldGUkLm5leHQoc3VjY2Vzcyk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHN0cmlwZVNlcnZpY2U6IFN0cmlwZVNlcnZpY2UpIHt9XG4gIEBPdXRwdXQoKSBwdWJsaWMgY2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjx7XG4gICAgdG9rZW4/OiBUb2tlbjtcbiAgICBwYXltZW50TWV0aG9kPzogUGF5bWVudE1ldGhvZERhdGE7XG4gICAgc291cmNlPzogU291cmNlO1xuICAgIGNvbXBsZXRlOiAoXG4gICAgICBzdGF0dXM6XG4gICAgICAgIHwgJ3N1Y2Nlc3MnXG4gICAgICAgIHwgJ2ZhaWwnXG4gICAgICAgIHwgJ2ludmFsaWRfcGF5ZXJfbmFtZSdcbiAgICAgICAgfCAnaW52YWxpZF9wYXllcl9waG9uZSdcbiAgICAgICAgfCAnaW52YWxpZF9wYXllcl9lbWFpbCdcbiAgICAgICAgfCAnaW52YWxpZF9zaGlwcGluZ19hZGRyZXNzJ1xuICAgICkgPT4ge307XG4gICAgcGF5ZXJOYW1lPzogc3RyaW5nO1xuICAgIHBheWVyRW1haWw/OiBzdHJpbmc7XG4gICAgcGF5ZXJQaG9uZT86IHN0cmluZztcbiAgICBzaGlwcGluZ0FkZHJlc3M/OiBTaGlwcGluZ0FkZHJlc3M7XG4gICAgc2hpcHBpbmdPcHRpb24/OiBTaGlwcGluZ09wdGlvbnM7XG4gICAgbWV0aG9kTmFtZT86IHN0cmluZztcbiAgfT4oKTtcbiAgQE91dHB1dCgpIHB1YmxpYyBzaGlwcGluZ0FkZHJlc3NDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPHtcbiAgICB1cGRhdGVXaXRoOiAodXBkYXRlRGV0YWlsczogVXBkYXRlRGV0YWlscykgPT4ge307XG4gICAgc2hpcHBpbmdBZGRyZXNzOiBTaGlwcGluZ0FkZHJlc3M7XG4gIH0+KCk7XG4gIEBPdXRwdXQoKSBwdWJsaWMgc2hpcHBpbmdPcHRpb25DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPHtcbiAgICB1cGRhdGVXaXRoOiAodXBkYXRlRGV0YWlsczogVXBkYXRlRGV0YWlscykgPT4ge307XG4gICAgc2hpcHBpbmdPcHRpb246IFNoaXBwaW5nT3B0aW9ucztcbiAgfT4oKTtcbiAgQE91dHB1dCgpIHB1YmxpYyBjYW5jZWwgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBwdWJsaWMgaGlkZSA9IGZhbHNlO1xuXG4gIEBWaWV3Q2hpbGQoJ3JlcXVlc3QnLCB7IHN0YXRpYzogZmFsc2UgfSkgcHJpdmF0ZSByZXF1ZXN0QnV0dG9uPzogRWxlbWVudFJlZjtcbiAgcHJpdmF0ZSBzdHlsZXMkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxQYXltZW50UmVxdWVzdEJ1dHRvblN0eWxlPih7fSk7XG4gIHByaXZhdGUgb3B0aW9ucyQgPSBuZXcgUmVwbGF5U3ViamVjdDxSZXF1ZXN0RWxlbWVudE9wdGlvbnM+KCk7XG4gIHByaXZhdGUgZWxlbWVudHNPcHRpb25zJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8RWxlbWVudHNPcHRpb25zPih7fSk7XG4gIHByaXZhdGUgbGFzdEV2ZW50OiBhbnk7XG4gIHByaXZhdGUgY29tcGxldGUkID0gbmV3IFN1YmplY3Q8Ym9vbGVhbj4oKTtcbiAgcHJpdmF0ZSBfYXR0YWNoZWQgPSBmYWxzZTtcbiAgcHJpdmF0ZSBfb3BlbmVkID0gZmFsc2U7XG4gIHByaXZhdGUgX3BheW1lbnRSZXF1ZXN0OiBhbnk7XG5cbiAgcHJpdmF0ZSBlbGVtZW50cyQ6IE9ic2VydmFibGU8YW55PjtcbiAgcHJpdmF0ZSByZXF1ZXN0JDogT2JzZXJ2YWJsZTxhbnk+O1xuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuZWxlbWVudHMkID0gdGhpcy5lbGVtZW50c09wdGlvbnMkLmFzT2JzZXJ2YWJsZSgpLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAob3B0aW9ucyA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cmlwZVNlcnZpY2UuZWxlbWVudHMob3B0aW9ucyk7XG4gICAgICB9KVxuICAgICk7XG4gICAgdGhpcy5yZXF1ZXN0JCA9IHRoaXMub3B0aW9ucyQuYXNPYnNlcnZhYmxlKCkucGlwZShcbiAgICAgIHN3aXRjaE1hcChvcHRpb25zID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyaXBlU2VydmljZS5wYXltZW50UmVxdWVzdChvcHRpb25zKTtcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIHRoaXMuY29tcGxldGUkLnN1YnNjcmliZShjb21wbGV0ZSA9PiB7XG4gICAgICBpZiAodGhpcy5sYXN0RXZlbnQpIHtcbiAgICAgICAgaWYgKGNvbXBsZXRlKSB7XG4gICAgICAgICAgdGhpcy5sYXN0RXZlbnQuY29tcGxldGUoJ3N1Y2Nlc3MnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmxhc3RFdmVudC5jb21wbGV0ZSgnZmFpbCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIGNvbWJpbmVMYXRlc3QodGhpcy5yZXF1ZXN0JCwgdGhpcy5lbGVtZW50cyQsIHRoaXMub3B0aW9ucyQsIHRoaXMuc3R5bGVzJCkuc3Vic2NyaWJlKFxuICAgICAgKFtwYXltZW50UmVxdWVzdCwgZWxlbWVudHMsIG9wdGlvbnMsIHN0eWxlc10pID0+IHtcbiAgICAgICAgaWYgKHRoaXMucmVxdWVzdEJ1dHRvbiAmJiAhdGhpcy5fYXR0YWNoZWQpIHtcbiAgICAgICAgICB0aGlzLl9wYXltZW50UmVxdWVzdCA9IHBheW1lbnRSZXF1ZXN0O1xuICAgICAgICAgIHRoaXMuX2F0dGFjaGVkID0gdHJ1ZTtcbiAgICAgICAgICBjb25zdCBlbGVtZW50ID0gZWxlbWVudHMuY3JlYXRlKCdwYXltZW50UmVxdWVzdEJ1dHRvbicsIHtcbiAgICAgICAgICAgIHBheW1lbnRSZXF1ZXN0LFxuICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgcGF5bWVudFJlcXVlc3RCdXR0b246IHsgLi4uc3R5bGVzIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHRoaXMuaGlkZSA9IGZhbHNlO1xuICAgICAgICAgIHBheW1lbnRSZXF1ZXN0LmNhbk1ha2VQYXltZW50KCkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICBlbGVtZW50Lm1vdW50KHRoaXMucmVxdWVzdEJ1dHRvbi5uYXRpdmVFbGVtZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuaGlkZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcGF5bWVudFJlcXVlc3Qub24oJ3NoaXBwaW5nYWRkcmVzc2NoYW5nZScsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2hpcHBpbmdBZGRyZXNzQ2hhbmdlLmVtaXQoZXZlbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHBheW1lbnRSZXF1ZXN0Lm9uKCdzaGlwcGluZ29wdGlvbmNoYW5nZScsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2hpcHBpbmdPcHRpb25DaGFuZ2UuZW1pdChldmVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcGF5bWVudFJlcXVlc3Qub24oJ3Rva2VuJywgZXZlbnQgPT4ge1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2UuZW1pdChldmVudCk7XG4gICAgICAgICAgICB0aGlzLl9vcGVuZWQgPSBmYWxzZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBwYXltZW50UmVxdWVzdC5vbigncGF5bWVudG1ldGhvZCcsIGV2ZW50ID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlLmVtaXQoZXZlbnQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHBheW1lbnRSZXF1ZXN0Lm9uKCdzb3VyY2UnLCBldmVudCA9PiB7XG4gICAgICAgICAgICB0aGlzLmNoYW5nZS5lbWl0KGV2ZW50KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBwYXltZW50UmVxdWVzdC5vbignY2FuY2VsJywgZXZlbnQgPT4ge1xuICAgICAgICAgICAgdGhpcy5jYW5jZWwuZW1pdChldmVudCk7XG4gICAgICAgICAgICB0aGlzLl9vcGVuZWQgPSBmYWxzZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBwYXltZW50UmVxdWVzdC5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9vcGVuZWQgPSB0cnVlO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2F0dGFjaGVkICYmICF0aGlzLl9vcGVuZWQpIHtcbiAgICAgICAgICB0aGlzLl9wYXltZW50UmVxdWVzdC51cGRhdGUoe1xuICAgICAgICAgICAgY3VycmVuY3k6IG9wdGlvbnMuY3VycmVuY3ksXG4gICAgICAgICAgICB0b3RhbDogb3B0aW9ucy50b3RhbCxcbiAgICAgICAgICAgIGRpc3BsYXlJdGVtczogb3B0aW9ucy5kaXNwbGF5SXRlbXMsXG4gICAgICAgICAgICBzaGlwcGluZ09wdGlvbnM6IG9wdGlvbnMuc2hpcHBpbmdPcHRpb25zXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuICB9XG59XG4iXX0=