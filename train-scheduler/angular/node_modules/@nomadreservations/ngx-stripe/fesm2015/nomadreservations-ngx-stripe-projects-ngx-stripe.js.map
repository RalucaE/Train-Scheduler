{"version":3,"file":"nomadreservations-ngx-stripe-projects-ngx-stripe.js","sources":["ng://@nomadreservations/ngx-stripe/projects/ngx-stripe/lib/interfaces/sources.ts","ng://@nomadreservations/ngx-stripe/projects/ngx-stripe/lib/interfaces/stripe.ts","ng://@nomadreservations/ngx-stripe/projects/ngx-stripe/lib/interfaces/token.ts","ng://@nomadreservations/ngx-stripe/projects/ngx-stripe/lib/services/platform.service.ts","ng://@nomadreservations/ngx-stripe/projects/ngx-stripe/lib/services/document-ref.service.ts","ng://@nomadreservations/ngx-stripe/projects/ngx-stripe/lib/services/window-ref.service.ts","ng://@nomadreservations/ngx-stripe/projects/ngx-stripe/lib/services/api-loader.service.ts","ng://@nomadreservations/ngx-stripe/projects/ngx-stripe/lib/services/stripe.service.ts","ng://@nomadreservations/ngx-stripe/projects/ngx-stripe/lib/payment-request.component.ts","ng://@nomadreservations/ngx-stripe/projects/ngx-stripe/lib/stripe-card.component.ts","ng://@nomadreservations/ngx-stripe/projects/ngx-stripe/lib/ngx-stripe.module.ts","ng://@nomadreservations/ngx-stripe/projects/ngx-stripe/public_api.ts","ng://@nomadreservations/ngx-stripe/projects/ngx-stripe/nomadreservations-ngx-stripe-projects-ngx-stripe.ts"],"sourcesContent":["import { Error, Address } from './utils';\n\nexport interface Source {\n  id: string;\n  object: 'source';\n  amount: number;\n  client_secret: string;\n  code_verification?: {\n    attempts_remaining: number;\n    status: 'pending' | 'succeded' | 'failed';\n  };\n  created: number;\n  currency: string;\n  flow: FlowTypes;\n  livemode: boolean;\n  metadata: { [key: string]: any };\n  owner: {\n    address: Address;\n    email: string;\n    name: string;\n    phone: string;\n    verified_address: Address;\n    verified_email: string;\n    verified_name: string;\n    verified_phone: string;\n  };\n  receiver: {\n    address: string;\n    amount_charged: number;\n    amount_received: number;\n    amount_returned: number;\n    redirect?: {\n      return_url: string;\n      status: 'pending' | 'succeeded' | 'failed';\n      url: string;\n    };\n  };\n  status: 'canceled' | 'chargeable' | 'consumed' | 'failed' | 'pending';\n  type:\n    | 'card'\n    | 'three_d_secure'\n    | 'giropay'\n    | 'sepa_bit'\n    | 'ideal'\n    | 'sofort'\n    | 'bancontact';\n  usage: UsageTypes;\n}\n\nexport type UsageTypes = 'reusable' | 'single_use';\nexport type FlowTypes = 'redirect' | 'receiver' | 'code_verification' | 'none';\n\nexport interface SourceParams {\n  id: string;\n  client_secret: string;\n}\n\nexport interface SourceData {\n  type?: string;\n  amount?: number;\n  currency?: string;\n  flow?: FlowTypes;\n  metadata?: { [key: string]: any };\n  owner?: {\n    address?: Address;\n    email?: string;\n    name?: string;\n    phone?: string;\n  };\n  redirect?: {\n    [key: string]: any;\n    return_url: string;\n  };\n  token?: string;\n  usage?: UsageTypes;\n}\n\nexport function isSourceData(sourceData: any): sourceData is SourceData {\n  return 'type' in sourceData;\n}\n\nexport interface SourceResult {\n  source?: Source;\n  error?: Error;\n}\n","import { PaymentMethodParams, PaymentMethodResult } from './payment-method';\nimport { InjectionToken } from '@angular/core';\nimport { Element, RequestElementOptions } from './element';\nimport { Elements, ElementsOptions } from './elements';\nimport { SourceData, SourceParams, SourceResult } from './sources';\nimport {\n  BankAccount,\n  BankAccountData,\n  CardDataOptions,\n  CardPaymentData,\n  ConfirmCardPaymentData,\n  ConfirmCardPaymentOptions,\n  ConfirmCardPaymentResult,\n  ConfirmIntentData,\n  ConfirmSetupIntentData,\n  Pii,\n  PiiData,\n  SetupIntentData,\n  SetupIntentResult,\n  TokenResult\n} from './token';\n\nexport const STRIPE_PUBLISHABLE_KEY = new InjectionToken<string>('Stripe Publishable Key');\nexport const STRIPE_OPTIONS = new InjectionToken<Options>('Stripe Options');\n\nexport interface StripeJS {\n  elements(options?: ElementsOptions): Elements;\n  createToken(el: Element, cardData?: CardDataOptions): Promise<TokenResult>;\n  createToken(account: BankAccount, bankAccountData: BankAccountData): Promise<TokenResult>;\n  createToken(pii: Pii, piiData: PiiData): Promise<TokenResult>;\n  createSource(el: Element, sourceData?: SourceData): Promise<SourceResult>;\n  createSource(sourceData: SourceData): Promise<SourceResult>;\n  paymentRequest(options: RequestElementOptions);\n  handleCardSetup(clientSecret: string, el: Element, cardSetupOptions?: SetupIntentData): Promise<SetupIntentResult>;\n  handleCardAction(clientSecret: string);\n  handleCardPayment(clientSecret: string, el: Element, data: CardPaymentData);\n  confirmPaymentIntent(clientSecret: string, el: Element, data: ConfirmIntentData);\n  confirmCardPayment(clientSecret: string, data: ConfirmCardPaymentData, options: ConfirmCardPaymentOptions): Promise<ConfirmCardPaymentResult>;\n  retrievePaymentIntent(clientSecret: string);\n  confirmSetupIntent(clientSecret: string, el: Element, data: ConfirmSetupIntentData);\n  retrieveSetupIntent(clientSecret: string);\n  retrieveSource(source: SourceParams): Promise<SourceResult>;\n  createPaymentMethod(paymentMethod: PaymentMethodParams): Promise<PaymentMethodResult>;\n}\n\nexport interface Options {\n  stripeAccount?: string;\n}\n","import { Error } from './utils';\nimport { PaymentMethodParams } from './payment-method';\n\nexport interface Token {\n  id: string;\n  object: 'token';\n  bank_account?: {\n    id: string;\n    country: string;\n    currency: string;\n    fingerprint: string;\n    object: 'bank_account';\n    account_holder_name: string;\n    account_holder_type: 'individual' | 'company';\n    bank_name: string;\n    last4: string;\n    routing_number: string;\n    status: 'new' | 'validated' | 'verified' | 'verification_failded' | 'errored';\n  };\n  card?: {\n    id: string;\n    country: string;\n    currency: string;\n    fingerprint: string;\n    object: 'card';\n    address_city: string;\n    address_country: string;\n    address_line1: string;\n    address_line1_check: FieldCheck;\n    address_line2: string;\n    address_state: string;\n    address_zip: string;\n    address_zip_check: FieldCheck;\n    brand: string;\n    cvc_check: FieldCheck;\n    dynamic_last4: string;\n    exp_month: number;\n    exp_year: number;\n    funding: 'credit' | 'debit' | 'prepaid' | 'unknown';\n    last4: string;\n    metadata: { [key: string]: any };\n    name: string;\n    tokenization_method: 'apple_pay' | 'android_pay';\n  };\n  client_ip: string;\n  livemode: boolean;\n  type: 'card' | 'bank_account';\n  used: boolean;\n}\n\nexport type FieldCheck = 'pass' | 'fail' | 'unavailable' | 'unchecked';\n\nexport interface CardDataOptions {\n  name?: string;\n  address_line1?: string;\n  address_line2?: string;\n  address_city?: string;\n  address_state?: string;\n  address_zip?: string;\n  address_country?: string;\n  currency?: string;\n}\n\nexport interface TokenResult {\n  token?: Token;\n  error?: Error;\n}\n\nexport type BankAccount = 'bank_account';\n\nexport interface BankAccountData {\n  country: string;\n  currency: string;\n  routing_number: string;\n  account_number: string;\n  account_holder_name: string;\n  account_holder_type: 'individual' | 'company';\n}\n\nexport type Pii = 'pii';\n\nexport interface PiiData {\n  personal_id_number: string;\n}\n\nexport function isBankAccount(account: any): account is BankAccount {\n  return account === 'bank_account';\n}\n\nexport function isBankAccountData(bankAccountData: any): bankAccountData is BankAccountData {\n  return (\n    'country' in bankAccountData &&\n    'currency' in bankAccountData &&\n    'routing_number' in bankAccountData &&\n    'account_number' in bankAccountData &&\n    'account_holder_name' in bankAccountData &&\n    'account_holder_type' in bankAccountData &&\n    (bankAccountData.account_holder_type === 'individual' || bankAccountData.account_holder_type === 'company')\n  );\n}\n\nexport function isPii(pii: any): pii is Pii {\n  return pii === 'pii';\n}\n\nexport function isPiiData(piiData: any): piiData is PiiData {\n  return 'personal_id_number' in piiData;\n}\n\nexport interface SetupIntent {\n  id: string;\n  object: 'setup_intent';\n  application?: string;\n  cancellation_reason?: 'abandoned' | 'requested_by_customer' | 'duplicate';\n  client_secret?: string;\n  created: number;\n  customer?: string;\n  description?: string;\n  last_setup_error?: Error;\n  livemode: boolean;\n  metadata: { [key: string]: any };\n  next_action: {\n    type: 'redirect_to_url' | 'use_stripe_sdk';\n    redirect_to_url?: {\n      return_url: string;\n      url: string;\n    };\n    use_stripe_sdk: { [key: string]: any };\n  };\n  on_behalf_of?: string;\n  payment_method?: string;\n  payment_method_options?: { [key: string]: any };\n  status:\n    | 'requires_payment_method'\n    | 'requires_confirmation'\n    | 'requires_action'\n    | 'processing'\n    | 'canceled'\n    | 'succeeded';\n  usage: 'on_session' | 'off_session';\n}\n\nexport interface SetupIntentResult {\n  setupIntent?: SetupIntent;\n  error?: Error;\n}\n\nexport interface SetupIntentData {\n  payment_method_data?: {\n    billing_details?: BillingDetails;\n  };\n}\n\nexport interface BillingDetails {\n  address?: Address;\n  email?: string;\n  name?: string;\n  phone?: string;\n}\n\nexport interface ConfirmIntentData {\n  payment_method_data?: {\n    billing_details?: BillingDetails;\n    return_url?: string;\n    shipping?: Shipping;\n    save_payment_method?: boolean;\n    setup_future_usage?: string;\n  };\n}\n\nexport interface Shipping {\n  address: {\n    city?: string;\n    country?: string;\n    line1?: string;\n    line2?: string;\n    postal_code?: string;\n    state?: string;\n  };\n  name: string;\n  carrier?: string;\n  phone?: string;\n  tracking_number?: string;\n}\n\nexport interface ConfirmSetupIntentData {\n  payment_method_data?: {\n    billing_details?: BillingDetails;\n    return_url?: string;\n  };\n}\n\nexport interface Address {\n  city?: string;\n  country?: string;\n  line1?: string;\n  line2?: string;\n  postal_code?: string;\n  state?: string;\n}\n\nexport interface ShippingOptions {\n  id: string;\n  label: string;\n  detail: string;\n  amount: number;\n}\n\nexport interface ShippingAddress {\n  country?: string;\n  addressLine?: string;\n  region?: string;\n  city?: string;\n  postalCode?: string;\n  recipient?: string;\n  phone?: string;\n  sortingCode?: string;\n  dependentLocality?: string;\n}\n\nexport interface PaymentIntent {\n  id: string;\n  object: 'payment_intent';\n  amount: number;\n  amount_capturable: number;\n  amount_received: number;\n  application?: string;\n  application_fee_ammount?: number;\n  canceled_at?: number;\n  cancellation_reason?: 'abandoned' | 'requested_by_customer' | 'duplicate';\n  cancelled_method?: 'automatic' | 'manual';\n  capture_method?: 'automatic' | 'manual';\n  charges?: Array<{\n    object: 'list';\n    data: Array<any>;\n    has_more: boolean;\n    url: string;\n  }>;\n  client_secret?: string;\n  confirmation_method?: 'automatic' | 'manual';\n  create: number;\n  currency?: string;\n  customer?: any;\n  description?: string;\n  invoice?: string;\n  last_payment_error?: any;\n  livemode: boolean;\n  metadata?: any;\n  next_action?: any;\n  on_behalf_of?: string;\n  payment_method?: string;\n  payment_method_options?: any;\n  payment_method_types?: Array<string>;\n  receipt_email?: string;\n  review?: string;\n  setup_feture_usage?: string;\n  shipping?: Shipping;\n  statement_descriptor?: string;\n  statement_descriptor_suffix?: string;\n  status:\n    | 'requires_payment_method'\n    | 'requires_confirmation'\n    | 'requires_action'\n    | 'processing'\n    | 'requires_capture'\n    | 'canceled'\n    | 'succeeded';\n  transfer_data?: any;\n  transfer_group?: string;\n}\n\nexport interface PaymentIntentResult {\n  paymentIntent?: PaymentIntent;\n  error?: Error;\n}\n\nexport interface CardPaymentData {\n  payment_method_data?: {\n    billing_details?: BillingDetails;\n  };\n  shipping?: Shipping;\n  receipt_email?: string;\n  save_payment_method?: boolean;\n  setup_future_usage?: string;\n}\n\nexport interface ConfirmCardPaymentData {\n  payment_method?: PaymentMethodParams | string;\n  shipping?: Shipping;\n  return_url?: string;\n  receipt_email?: string;\n  save_payment_method?: boolean;\n  setup_future_usage?: boolean;\n}\n\nexport interface ConfirmCardPaymentOptions {\n  handleActions?: boolean;\n}\n\nexport interface ConfirmCardPaymentResult {\n  paymentIntent?: PaymentIntent;\n  error?: Error;\n}\n","import { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { Inject, Injectable, PLATFORM_ID } from '@angular/core';\n\nexport interface IPlatformService {\n  isBrowser: boolean;\n  isServer: boolean;\n}\n\n@Injectable()\nexport class PlatformService implements IPlatformService {\n  constructor( @Inject(PLATFORM_ID) private platformId: any) { }\n\n  public get isBrowser(): boolean {\n    return isPlatformBrowser(this.platformId);\n  }\n\n  public get isServer(): boolean {\n    return isPlatformServer(this.platformId);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PlatformService } from './platform.service';\n\n@Injectable()\nexport class DocumentRef {\n  constructor(\n    private _platform: PlatformService\n  ) {}\n\n  public getNativeDocument(): Document {\n    if (this._platform.isBrowser) {\n      return document;\n    }\n    return {} as Document;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { PlatformService } from './platform.service';\n\n@Injectable()\nexport class WindowRef {\n  constructor(\n    private _platform: PlatformService\n  ) {}\n\n  public getNativeWindow(): Window {\n    if (this._platform.isBrowser) {\n      return window;\n    }\n    return {} as Window;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { DocumentRef } from './document-ref.service';\nimport { PlatformService } from './platform.service';\nimport { WindowRef } from './window-ref.service';\n\nexport interface Status {\n  loaded: boolean;\n  loading: boolean;\n  error: boolean;\n}\n\n@Injectable()\nexport class LazyStripeAPILoader {\n  private status: BehaviorSubject<Status> = new BehaviorSubject<Status>({\n    error: false,\n    loaded: false,\n    loading: false\n  });\n\n  constructor(\n    private window: WindowRef,\n    private document: DocumentRef,\n    private _platform: PlatformService\n  ) {}\n\n  public asStream(): Observable<Status> {\n    this.load();\n    return this.status.asObservable();\n  }\n\n  public isReady(): boolean {\n    return this.status.getValue().loaded;\n  }\n\n  public load() {\n    if (this._platform.isServer) {\n      return;\n    }\n    if (this.window.getNativeWindow().hasOwnProperty('Stripe')) {\n      this.status.next({\n        error: false,\n        loaded: true,\n        loading: false\n      });\n    } else {\n      if (!this.status.getValue().loaded && !this.status.getValue().loading) {\n        this.status.next({\n          ...this.status.getValue(),\n          loading: true\n        });\n\n        const script = this.document\n          .getNativeDocument()\n          .createElement('script');\n        script.type = 'text/javascript';\n        script.async = true;\n        script.defer = true;\n        script.src = 'https://js.stripe.com/v3/';\n\n        script.onload = () => {\n          this.status.next({\n            error: false,\n            loaded: true,\n            loading: false\n          });\n        };\n\n        script.onerror = () => {\n          this.status.next({\n            error: true,\n            loaded: false,\n            loading: false\n          });\n        };\n\n        this.document.getNativeDocument().body.appendChild(script);\n      }\n    }\n  }\n}\n","import { PaymentMethodParams, PaymentMethodResult } from './../interfaces/payment-method';\ndeclare var Stripe;\n\nimport { Inject, Injectable } from '@angular/core';\nimport { from as observableFrom, Observable, ReplaySubject } from 'rxjs';\nimport { filter, map, publishLast, refCount, take } from 'rxjs/operators';\nimport { Element, RequestElementOptions } from '../interfaces/element';\nimport { Elements, ElementsOptions } from '../interfaces/elements';\nimport { isSourceData, SourceData, SourceParams, SourceResult } from '../interfaces/sources';\nimport { Options, StripeJS, STRIPE_OPTIONS, STRIPE_PUBLISHABLE_KEY } from '../interfaces/stripe';\nimport {\n  BankAccount,\n  BankAccountData,\n  CardDataOptions,\n  CardPaymentData,\n  ConfirmCardPaymentData,\n  ConfirmCardPaymentOptions,\n  ConfirmCardPaymentResult,\n  ConfirmIntentData,\n  ConfirmSetupIntentData,\n  isBankAccount,\n  isBankAccountData,\n  isPii,\n  isPiiData,\n  PaymentIntentResult,\n  Pii,\n  PiiData,\n  SetupIntentData,\n  SetupIntentResult,\n  TokenResult\n} from '../interfaces/token';\nimport { LazyStripeAPILoader, Status } from './api-loader.service';\nimport { PlatformService } from './platform.service';\nimport { WindowRef } from './window-ref.service';\n\n@Injectable()\nexport class StripeService {\n  public stripeChanged$: ReplaySubject<StripeJS> = new ReplaySubject();\n  private stripe: StripeJS = {} as StripeJS;\n\n  constructor(\n    @Inject(STRIPE_PUBLISHABLE_KEY) private key: string,\n    @Inject(STRIPE_OPTIONS) private options: Options,\n    private loader: LazyStripeAPILoader,\n    private window: WindowRef,\n    private _platform: PlatformService\n  ) {\n    this.changeKey(this.key, this.options)\n      .pipe(take(1))\n      .subscribe(() => {});\n  }\n\n  public changeKey(key: string, options?: Options): Observable<StripeJS | undefined> {\n    const obs = this.loader.asStream().pipe(\n      filter((status: Status) => status.loaded === true),\n      map(() => {\n        if (!this.window.getNativeWindow()) {\n          return;\n        }\n        const Stripe = (this.window.getNativeWindow() as any).Stripe;\n        if (key) {\n          this.stripe = options ? (Stripe(key, options) as StripeJS) : (Stripe(key) as StripeJS);\n          this.stripeChanged$.next(this.stripe);\n        }\n        return this.stripe;\n      }),\n      publishLast(),\n      refCount()\n    );\n    obs.subscribe();\n    return obs;\n  }\n\n  public elements(options?: ElementsOptions): Observable<Elements> {\n    return this.stripeChanged$.pipe(map(() => this.stripe.elements(options)));\n  }\n\n  public createToken(\n    a: Element | BankAccount | Pii,\n    b: CardDataOptions | BankAccountData | PiiData | undefined\n  ): Observable<TokenResult> {\n    if (isBankAccount(a) && isBankAccountData(b)) {\n      return observableFrom(this.stripe.createToken(a, b));\n    } else if (isPii(a) && isPiiData(b)) {\n      return observableFrom(this.stripe.createToken(a, b));\n    } else {\n      return observableFrom(this.stripe.createToken(a as Element, b as CardDataOptions | undefined));\n    }\n  }\n\n  public paymentRequest(options: RequestElementOptions): Observable<Element> {\n    return this.stripeChanged$.pipe(map(() => this.stripe.paymentRequest(options)));\n  }\n\n  public handleCardSetup(\n    clientSecret: string,\n    element: Element,\n    cardSetupOptions?: SetupIntentData | undefined\n  ): Observable<SetupIntentResult> {\n    return observableFrom(this.stripe.handleCardSetup(clientSecret, element, cardSetupOptions));\n  }\n\n  public handleCardPayment(\n    clientSecret: string,\n    element: Element,\n    cardSetupOptions?: CardPaymentData | undefined\n  ): Observable<PaymentIntentResult> {\n    return observableFrom(this.stripe.handleCardPayment(clientSecret, element, cardSetupOptions));\n  }\n\n  public handleCardAction(clientSecret: string): Observable<PaymentIntentResult> {\n    return observableFrom(this.stripe.handleCardAction(clientSecret));\n  }\n\n  public confirmPaymentIntent(\n    clientSecret: string,\n    element: Element,\n    intentOptions?: ConfirmIntentData | undefined\n  ): Observable<SetupIntentResult> {\n    return observableFrom(this.stripe.confirmPaymentIntent(clientSecret, element, intentOptions));\n  }\n\n  public confirmCardPayment(\n    clientSecret: string,\n    data: ConfirmCardPaymentData,\n    options?: ConfirmCardPaymentOptions | undefined\n  ): Observable<ConfirmCardPaymentResult> {\n    return observableFrom(this.stripe.confirmCardPayment(clientSecret, data, options));\n  }\n\n  public retrievePaymentIntent(clientSecret: string): Observable<PaymentIntentResult> {\n    return observableFrom(this.stripe.retrievePaymentIntent(clientSecret));\n  }\n\n  public retrieveSetupIntent(clientSecret: string): Observable<SetupIntentResult> {\n    return observableFrom(this.stripe.retrieveSetupIntent(clientSecret));\n  }\n\n  public confirmSetupIntent(\n    clientSecret: string,\n    element: Element,\n    intentOptions?: ConfirmSetupIntentData | undefined\n  ): Observable<SetupIntentResult> {\n    return observableFrom(this.stripe.confirmSetupIntent(clientSecret, element, intentOptions));\n  }\n\n  public createSource(a: Element | SourceData, b?: SourceData | undefined): Observable<SourceResult> {\n    if (isSourceData(a)) {\n      return observableFrom(this.stripe.createSource(a as SourceData));\n    }\n    return observableFrom(this.stripe.createSource(a as Element, b));\n  }\n\n  public retrieveSource(source: SourceParams): Observable<SourceResult> {\n    return observableFrom(this.stripe.retrieveSource(source));\n  }\n\n  public createPaymentMethod(paymentMethod: PaymentMethodParams): Observable<PaymentMethodResult> {\n    return observableFrom(this.stripe.createPaymentMethod(paymentMethod));\n  }\n}\n","import { AfterViewInit, Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\nimport { BehaviorSubject, combineLatest, Observable, ReplaySubject, Subject } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { PaymentRequestButtonStyle, RequestElementOptions, UpdateDetails } from './interfaces/element';\nimport { ElementsOptions } from './interfaces/elements';\nimport { Source } from './interfaces/sources';\nimport { ShippingAddress, ShippingOptions, Token } from './interfaces/token';\nimport { StripeService } from './services/stripe.service';\n\n@Component({\n  selector: 'ngx-payment-request',\n  template: '<div #request [style.display-none]=\"hide\"></div>'\n})\nexport class PaymentRequestComponent implements OnInit, AfterViewInit {\n  @Input()\n  private set options(optionsIn: RequestElementOptions) {\n    this.options$.next(optionsIn);\n  }\n\n  @Input()\n  public set elementsOptions(optionsIn: ElementsOptions) {\n    this.elementsOptions$.next(optionsIn);\n  }\n\n  @Input()\n  public set styles(optionsIn: PaymentRequestButtonStyle) {\n    this.styles$.next(optionsIn);\n  }\n\n  @Input()\n  public set complete(success: boolean) {\n    this.complete$.next(success);\n  }\n\n  constructor(private stripeService: StripeService) {}\n  @Output() public change = new EventEmitter<{\n    token?: Token;\n    paymentMethod?: PaymentMethodData;\n    source?: Source;\n    complete: (\n      status:\n        | 'success'\n        | 'fail'\n        | 'invalid_payer_name'\n        | 'invalid_payer_phone'\n        | 'invalid_payer_email'\n        | 'invalid_shipping_address'\n    ) => {};\n    payerName?: string;\n    payerEmail?: string;\n    payerPhone?: string;\n    shippingAddress?: ShippingAddress;\n    shippingOption?: ShippingOptions;\n    methodName?: string;\n  }>();\n  @Output() public shippingAddressChange = new EventEmitter<{\n    updateWith: (updateDetails: UpdateDetails) => {};\n    shippingAddress: ShippingAddress;\n  }>();\n  @Output() public shippingOptionChange = new EventEmitter<{\n    updateWith: (updateDetails: UpdateDetails) => {};\n    shippingOption: ShippingOptions;\n  }>();\n  @Output() public cancel = new EventEmitter<any>();\n\n  public hide = false;\n\n  @ViewChild('request', { static: false }) private requestButton?: ElementRef;\n  private styles$ = new BehaviorSubject<PaymentRequestButtonStyle>({});\n  private options$ = new ReplaySubject<RequestElementOptions>();\n  private elementsOptions$ = new BehaviorSubject<ElementsOptions>({});\n  private lastEvent: any;\n  private complete$ = new Subject<boolean>();\n  private _attached = false;\n  private _opened = false;\n  private _paymentRequest: any;\n\n  private elements$: Observable<any>;\n  private request$: Observable<any>;\n\n  ngOnInit() {\n    this.elements$ = this.elementsOptions$.asObservable().pipe(\n      switchMap(options => {\n        return this.stripeService.elements(options);\n      })\n    );\n    this.request$ = this.options$.asObservable().pipe(\n      switchMap(options => {\n        return this.stripeService.paymentRequest(options);\n      })\n    );\n\n    this.complete$.subscribe(complete => {\n      if (this.lastEvent) {\n        if (complete) {\n          this.lastEvent.complete('success');\n        } else {\n          this.lastEvent.complete('fail');\n        }\n      }\n    });\n  }\n  ngAfterViewInit(): void {\n    combineLatest(this.request$, this.elements$, this.options$, this.styles$).subscribe(\n      ([paymentRequest, elements, options, styles]) => {\n        if (this.requestButton && !this._attached) {\n          this._paymentRequest = paymentRequest;\n          this._attached = true;\n          const element = elements.create('paymentRequestButton', {\n            paymentRequest,\n            style: {\n              paymentRequestButton: { ...styles }\n            }\n          });\n\n          this.hide = false;\n          paymentRequest.canMakePayment().then(result => {\n            if (result) {\n              element.mount(this.requestButton.nativeElement);\n            } else {\n              this.hide = true;\n            }\n          });\n          paymentRequest.on('shippingaddresschange', event => {\n            this.shippingAddressChange.emit(event);\n          });\n          paymentRequest.on('shippingoptionchange', event => {\n            this.shippingOptionChange.emit(event);\n          });\n          paymentRequest.on('token', event => {\n            this.change.emit(event);\n            this._opened = false;\n          });\n          paymentRequest.on('paymentmethod', event => {\n            this.change.emit(event);\n          });\n          paymentRequest.on('source', event => {\n            this.change.emit(event);\n          });\n          paymentRequest.on('cancel', event => {\n            this.cancel.emit(event);\n            this._opened = false;\n          });\n          paymentRequest.on('click', () => {\n            this._opened = true;\n          });\n        } else if (this._attached && !this._opened) {\n          this._paymentRequest.update({\n            currency: options.currency,\n            total: options.total,\n            displayItems: options.displayItems,\n            shippingOptions: options.shippingOptions\n          });\n        }\n      }\n    );\n  }\n}\n","import { AfterViewInit, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { BehaviorSubject, combineLatest as observableCombineLatest, Observable } from 'rxjs';\nimport { filter, switchMap } from 'rxjs/operators';\nimport { Element as StripeElement, ElementOptions, ElementType } from './interfaces/element';\nimport { Elements, ElementsOptions } from './interfaces/elements';\nimport { StripeService } from './services/stripe.service';\n\n@Component({\n  selector: 'ngx-stripe-card',\n  template: `\n    <div class=\"field\" #card>\n      <div [class]=\"type\" *ngFor=\"let type of elementTypes\"></div>\n    </div>\n  `\n})\nexport class StripeCardComponent implements AfterViewInit {\n  @Input()\n  private set options(optionsIn: ElementOptions) {\n    this.options$.next(optionsIn);\n  }\n\n  @Input()\n  public set elementsOptions(optionsIn: ElementsOptions) {\n    this.elementsOptions$.next(optionsIn);\n  }\n\n  constructor(private stripeService: StripeService) {}\n  @Output() public change = new EventEmitter<{ card: any; element: StripeElement }>();\n  @Output() public complete = new EventEmitter<{ card: any; element: StripeElement }>();\n  @Output() public error = new EventEmitter<any>();\n  @Input() public elementTypes: Array<ElementType> = ['card'];\n\n  @ViewChild('card', { static: false }) private card: ElementRef;\n  private cardElement?: StripeElement;\n  private elements?: Array<StripeElement>;\n  private options$ = new BehaviorSubject<ElementOptions>({});\n  private elementsOptions$ = new BehaviorSubject<ElementsOptions>({});\n\n  public ngAfterViewInit(): void {\n    const elements$: Observable<Elements> = this.elementsOptions$.asObservable().pipe(\n      switchMap(options => {\n        if (Object.keys(options).length > 0) {\n          return this.stripeService.elements(options);\n        }\n        return this.stripeService.elements();\n      })\n    );\n    let complete = {};\n    observableCombineLatest(\n      elements$,\n      this.options$.asObservable().pipe(filter(options => Boolean(options)))\n    ).subscribe(([elements, options]) => {\n      this.elements = [];\n      if (this.card) {\n        for (const type of this.elementTypes) {\n          const element = elements.create(type, options);\n          complete = {\n            ...complete,\n            [type]: element\n          };\n\n          if (['card', 'cardNumber'].indexOf(type) !== -1) {\n            this.cardElement = element;\n          }\n          const mountTo = this.card.nativeElement.querySelector(`.${type}`);\n\n          element.mount(mountTo);\n\n          element.on('change', changedCard => {\n            let isComplete = changedCard.complete;\n            for (const key in complete) {\n              if (complete) {\n                const value = complete[key];\n                if (key !== changedCard.elementType && !value._complete) {\n                  isComplete = false;\n                }\n              }\n            }\n            this.change.emit({\n              card: changedCard,\n              elements: this.elements,\n              type: changedCard.elementType,\n              complete: isComplete,\n              element: element\n            } as any);\n            if (isComplete) {\n              this.complete.emit({\n                card: changedCard,\n                elements: this.elements,\n                type: changedCard.elementType,\n                complete: isComplete,\n                element: element\n              } as any);\n            }\n            if (changedCard.error) {\n              this.error.emit(changedCard.error);\n            }\n          });\n          this.elements = [...this.elements, element];\n        }\n      }\n    });\n  }\n\n  public getCard(): StripeElement | undefined {\n    return this.cardElement;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Options, STRIPE_OPTIONS, STRIPE_PUBLISHABLE_KEY } from './interfaces/stripe';\nimport { PaymentRequestComponent } from './payment-request.component';\nimport { LazyStripeAPILoader } from './services/api-loader.service';\nimport { DocumentRef } from './services/document-ref.service';\nimport { PlatformService } from './services/platform.service';\nimport { StripeService } from './services/stripe.service';\nimport { WindowRef } from './services/window-ref.service';\nimport { StripeCardComponent } from './stripe-card.component';\n\nexport interface NgxStripeModuleOptions {\n  publishableKey?: string;\n  options?: Options;\n}\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [StripeCardComponent, PaymentRequestComponent],\n  exports: [StripeCardComponent, PaymentRequestComponent]\n})\nexport class NgxStripeModule {\n  public static forRoot(publishableKey: string, options?: Options): ModuleWithProviders {\n    return {\n      ngModule: NgxStripeModule,\n      providers: [\n        LazyStripeAPILoader,\n        StripeService,\n        PlatformService,\n        WindowRef,\n        DocumentRef,\n        {\n          provide: STRIPE_PUBLISHABLE_KEY,\n          useValue: publishableKey\n        },\n        {\n          provide: STRIPE_OPTIONS,\n          useValue: options\n        }\n      ]\n    };\n  }\n}\n","/*\n * Public API Surface of ngx-stripe\n */\n\nexport * from './lib/index';\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {PaymentRequestComponent as Éµa} from './lib/payment-request.component';"],"names":["tslib_1.__param","observableFrom","tslib_1.__decorate","observableCombineLatest"],"mappings":"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"}