import { InjectionToken, Inject, PLATFORM_ID, Injectable, EventEmitter, Input, Output, ViewChild, ElementRef, Component, NgModule } from '@angular/core';
import { __decorate, __param, __metadata } from 'tslib';
import { isPlatformBrowser, isPlatformServer, CommonModule } from '@angular/common';
import { BehaviorSubject, ReplaySubject, from, Subject, combineLatest } from 'rxjs';
import { take, filter, map, publishLast, refCount, switchMap } from 'rxjs/operators';

function isSourceData(sourceData) {
    return 'type' in sourceData;
}

const STRIPE_PUBLISHABLE_KEY = new InjectionToken('Stripe Publishable Key');
const STRIPE_OPTIONS = new InjectionToken('Stripe Options');

function isBankAccount(account) {
    return account === 'bank_account';
}
function isBankAccountData(bankAccountData) {
    return ('country' in bankAccountData &&
        'currency' in bankAccountData &&
        'routing_number' in bankAccountData &&
        'account_number' in bankAccountData &&
        'account_holder_name' in bankAccountData &&
        'account_holder_type' in bankAccountData &&
        (bankAccountData.account_holder_type === 'individual' || bankAccountData.account_holder_type === 'company'));
}
function isPii(pii) {
    return pii === 'pii';
}
function isPiiData(piiData) {
    return 'personal_id_number' in piiData;
}

let PlatformService = class PlatformService {
    constructor(platformId) {
        this.platformId = platformId;
    }
    get isBrowser() {
        return isPlatformBrowser(this.platformId);
    }
    get isServer() {
        return isPlatformServer(this.platformId);
    }
};
PlatformService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
PlatformService = __decorate([
    Injectable(),
    __param(0, Inject(PLATFORM_ID)),
    __metadata("design:paramtypes", [Object])
], PlatformService);

let DocumentRef = class DocumentRef {
    constructor(_platform) {
        this._platform = _platform;
    }
    getNativeDocument() {
        if (this._platform.isBrowser) {
            return document;
        }
        return {};
    }
};
DocumentRef.ctorParameters = () => [
    { type: PlatformService }
];
DocumentRef = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [PlatformService])
], DocumentRef);

let WindowRef = class WindowRef {
    constructor(_platform) {
        this._platform = _platform;
    }
    getNativeWindow() {
        if (this._platform.isBrowser) {
            return window;
        }
        return {};
    }
};
WindowRef.ctorParameters = () => [
    { type: PlatformService }
];
WindowRef = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [PlatformService])
], WindowRef);

let LazyStripeAPILoader = class LazyStripeAPILoader {
    constructor(window, document, _platform) {
        this.window = window;
        this.document = document;
        this._platform = _platform;
        this.status = new BehaviorSubject({
            error: false,
            loaded: false,
            loading: false
        });
    }
    asStream() {
        this.load();
        return this.status.asObservable();
    }
    isReady() {
        return this.status.getValue().loaded;
    }
    load() {
        if (this._platform.isServer) {
            return;
        }
        if (this.window.getNativeWindow().hasOwnProperty('Stripe')) {
            this.status.next({
                error: false,
                loaded: true,
                loading: false
            });
        }
        else {
            if (!this.status.getValue().loaded && !this.status.getValue().loading) {
                this.status.next(Object.assign({}, this.status.getValue(), { loading: true }));
                const script = this.document
                    .getNativeDocument()
                    .createElement('script');
                script.type = 'text/javascript';
                script.async = true;
                script.defer = true;
                script.src = 'https://js.stripe.com/v3/';
                script.onload = () => {
                    this.status.next({
                        error: false,
                        loaded: true,
                        loading: false
                    });
                };
                script.onerror = () => {
                    this.status.next({
                        error: true,
                        loaded: false,
                        loading: false
                    });
                };
                this.document.getNativeDocument().body.appendChild(script);
            }
        }
    }
};
LazyStripeAPILoader.ctorParameters = () => [
    { type: WindowRef },
    { type: DocumentRef },
    { type: PlatformService }
];
LazyStripeAPILoader = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [WindowRef,
        DocumentRef,
        PlatformService])
], LazyStripeAPILoader);

let StripeService = class StripeService {
    constructor(key, options, loader, window, _platform) {
        this.key = key;
        this.options = options;
        this.loader = loader;
        this.window = window;
        this._platform = _platform;
        this.stripeChanged$ = new ReplaySubject();
        this.stripe = {};
        this.changeKey(this.key, this.options)
            .pipe(take(1))
            .subscribe(() => { });
    }
    changeKey(key, options) {
        const obs = this.loader.asStream().pipe(filter((status) => status.loaded === true), map(() => {
            if (!this.window.getNativeWindow()) {
                return;
            }
            const Stripe = this.window.getNativeWindow().Stripe;
            if (key) {
                this.stripe = options ? Stripe(key, options) : Stripe(key);
                this.stripeChanged$.next(this.stripe);
            }
            return this.stripe;
        }), publishLast(), refCount());
        obs.subscribe();
        return obs;
    }
    elements(options) {
        return this.stripeChanged$.pipe(map(() => this.stripe.elements(options)));
    }
    createToken(a, b) {
        if (isBankAccount(a) && isBankAccountData(b)) {
            return from(this.stripe.createToken(a, b));
        }
        else if (isPii(a) && isPiiData(b)) {
            return from(this.stripe.createToken(a, b));
        }
        else {
            return from(this.stripe.createToken(a, b));
        }
    }
    paymentRequest(options) {
        return this.stripeChanged$.pipe(map(() => this.stripe.paymentRequest(options)));
    }
    handleCardSetup(clientSecret, element, cardSetupOptions) {
        return from(this.stripe.handleCardSetup(clientSecret, element, cardSetupOptions));
    }
    handleCardPayment(clientSecret, element, cardSetupOptions) {
        return from(this.stripe.handleCardPayment(clientSecret, element, cardSetupOptions));
    }
    handleCardAction(clientSecret) {
        return from(this.stripe.handleCardAction(clientSecret));
    }
    confirmPaymentIntent(clientSecret, element, intentOptions) {
        return from(this.stripe.confirmPaymentIntent(clientSecret, element, intentOptions));
    }
    confirmCardPayment(clientSecret, data, options) {
        return from(this.stripe.confirmCardPayment(clientSecret, data, options));
    }
    retrievePaymentIntent(clientSecret) {
        return from(this.stripe.retrievePaymentIntent(clientSecret));
    }
    retrieveSetupIntent(clientSecret) {
        return from(this.stripe.retrieveSetupIntent(clientSecret));
    }
    confirmSetupIntent(clientSecret, element, intentOptions) {
        return from(this.stripe.confirmSetupIntent(clientSecret, element, intentOptions));
    }
    createSource(a, b) {
        if (isSourceData(a)) {
            return from(this.stripe.createSource(a));
        }
        return from(this.stripe.createSource(a, b));
    }
    retrieveSource(source) {
        return from(this.stripe.retrieveSource(source));
    }
    createPaymentMethod(paymentMethod) {
        return from(this.stripe.createPaymentMethod(paymentMethod));
    }
};
StripeService.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [STRIPE_PUBLISHABLE_KEY,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [STRIPE_OPTIONS,] }] },
    { type: LazyStripeAPILoader },
    { type: WindowRef },
    { type: PlatformService }
];
StripeService = __decorate([
    Injectable(),
    __param(0, Inject(STRIPE_PUBLISHABLE_KEY)),
    __param(1, Inject(STRIPE_OPTIONS)),
    __metadata("design:paramtypes", [String, Object, LazyStripeAPILoader,
        WindowRef,
        PlatformService])
], StripeService);

let PaymentRequestComponent = class PaymentRequestComponent {
    constructor(stripeService) {
        this.stripeService = stripeService;
        this.change = new EventEmitter();
        this.shippingAddressChange = new EventEmitter();
        this.shippingOptionChange = new EventEmitter();
        this.cancel = new EventEmitter();
        this.hide = false;
        this.styles$ = new BehaviorSubject({});
        this.options$ = new ReplaySubject();
        this.elementsOptions$ = new BehaviorSubject({});
        this.complete$ = new Subject();
        this._attached = false;
        this._opened = false;
    }
    set options(optionsIn) {
        this.options$.next(optionsIn);
    }
    set elementsOptions(optionsIn) {
        this.elementsOptions$.next(optionsIn);
    }
    set styles(optionsIn) {
        this.styles$.next(optionsIn);
    }
    set complete(success) {
        this.complete$.next(success);
    }
    ngOnInit() {
        this.elements$ = this.elementsOptions$.asObservable().pipe(switchMap(options => {
            return this.stripeService.elements(options);
        }));
        this.request$ = this.options$.asObservable().pipe(switchMap(options => {
            return this.stripeService.paymentRequest(options);
        }));
        this.complete$.subscribe(complete => {
            if (this.lastEvent) {
                if (complete) {
                    this.lastEvent.complete('success');
                }
                else {
                    this.lastEvent.complete('fail');
                }
            }
        });
    }
    ngAfterViewInit() {
        combineLatest(this.request$, this.elements$, this.options$, this.styles$).subscribe(([paymentRequest, elements, options, styles]) => {
            if (this.requestButton && !this._attached) {
                this._paymentRequest = paymentRequest;
                this._attached = true;
                const element = elements.create('paymentRequestButton', {
                    paymentRequest,
                    style: {
                        paymentRequestButton: Object.assign({}, styles)
                    }
                });
                this.hide = false;
                paymentRequest.canMakePayment().then(result => {
                    if (result) {
                        element.mount(this.requestButton.nativeElement);
                    }
                    else {
                        this.hide = true;
                    }
                });
                paymentRequest.on('shippingaddresschange', event => {
                    this.shippingAddressChange.emit(event);
                });
                paymentRequest.on('shippingoptionchange', event => {
                    this.shippingOptionChange.emit(event);
                });
                paymentRequest.on('token', event => {
                    this.change.emit(event);
                    this._opened = false;
                });
                paymentRequest.on('paymentmethod', event => {
                    this.change.emit(event);
                });
                paymentRequest.on('source', event => {
                    this.change.emit(event);
                });
                paymentRequest.on('cancel', event => {
                    this.cancel.emit(event);
                    this._opened = false;
                });
                paymentRequest.on('click', () => {
                    this._opened = true;
                });
            }
            else if (this._attached && !this._opened) {
                this._paymentRequest.update({
                    currency: options.currency,
                    total: options.total,
                    displayItems: options.displayItems,
                    shippingOptions: options.shippingOptions
                });
            }
        });
    }
};
PaymentRequestComponent.ctorParameters = () => [
    { type: StripeService }
];
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], PaymentRequestComponent.prototype, "options", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], PaymentRequestComponent.prototype, "elementsOptions", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], PaymentRequestComponent.prototype, "styles", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], PaymentRequestComponent.prototype, "complete", null);
__decorate([
    Output(),
    __metadata("design:type", Object)
], PaymentRequestComponent.prototype, "change", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], PaymentRequestComponent.prototype, "shippingAddressChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], PaymentRequestComponent.prototype, "shippingOptionChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], PaymentRequestComponent.prototype, "cancel", void 0);
__decorate([
    ViewChild('request', { static: false }),
    __metadata("design:type", ElementRef)
], PaymentRequestComponent.prototype, "requestButton", void 0);
PaymentRequestComponent = __decorate([
    Component({
        selector: 'ngx-payment-request',
        template: '<div #request [style.display-none]="hide"></div>'
    }),
    __metadata("design:paramtypes", [StripeService])
], PaymentRequestComponent);

let StripeCardComponent = class StripeCardComponent {
    constructor(stripeService) {
        this.stripeService = stripeService;
        this.change = new EventEmitter();
        this.complete = new EventEmitter();
        this.error = new EventEmitter();
        this.elementTypes = ['card'];
        this.options$ = new BehaviorSubject({});
        this.elementsOptions$ = new BehaviorSubject({});
    }
    set options(optionsIn) {
        this.options$.next(optionsIn);
    }
    set elementsOptions(optionsIn) {
        this.elementsOptions$.next(optionsIn);
    }
    ngAfterViewInit() {
        const elements$ = this.elementsOptions$.asObservable().pipe(switchMap(options => {
            if (Object.keys(options).length > 0) {
                return this.stripeService.elements(options);
            }
            return this.stripeService.elements();
        }));
        let complete = {};
        combineLatest(elements$, this.options$.asObservable().pipe(filter(options => Boolean(options)))).subscribe(([elements, options]) => {
            this.elements = [];
            if (this.card) {
                for (const type of this.elementTypes) {
                    const element = elements.create(type, options);
                    complete = Object.assign({}, complete, { [type]: element });
                    if (['card', 'cardNumber'].indexOf(type) !== -1) {
                        this.cardElement = element;
                    }
                    const mountTo = this.card.nativeElement.querySelector(`.${type}`);
                    element.mount(mountTo);
                    element.on('change', changedCard => {
                        let isComplete = changedCard.complete;
                        for (const key in complete) {
                            if (complete) {
                                const value = complete[key];
                                if (key !== changedCard.elementType && !value._complete) {
                                    isComplete = false;
                                }
                            }
                        }
                        this.change.emit({
                            card: changedCard,
                            elements: this.elements,
                            type: changedCard.elementType,
                            complete: isComplete,
                            element: element
                        });
                        if (isComplete) {
                            this.complete.emit({
                                card: changedCard,
                                elements: this.elements,
                                type: changedCard.elementType,
                                complete: isComplete,
                                element: element
                            });
                        }
                        if (changedCard.error) {
                            this.error.emit(changedCard.error);
                        }
                    });
                    this.elements = [...this.elements, element];
                }
            }
        });
    }
    getCard() {
        return this.cardElement;
    }
};
StripeCardComponent.ctorParameters = () => [
    { type: StripeService }
];
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], StripeCardComponent.prototype, "options", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], StripeCardComponent.prototype, "elementsOptions", null);
__decorate([
    Output(),
    __metadata("design:type", Object)
], StripeCardComponent.prototype, "change", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], StripeCardComponent.prototype, "complete", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], StripeCardComponent.prototype, "error", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], StripeCardComponent.prototype, "elementTypes", void 0);
__decorate([
    ViewChild('card', { static: false }),
    __metadata("design:type", ElementRef)
], StripeCardComponent.prototype, "card", void 0);
StripeCardComponent = __decorate([
    Component({
        selector: 'ngx-stripe-card',
        template: `
    <div class="field" #card>
      <div [class]="type" *ngFor="let type of elementTypes"></div>
    </div>
  `
    }),
    __metadata("design:paramtypes", [StripeService])
], StripeCardComponent);

var NgxStripeModule_1;
let NgxStripeModule = NgxStripeModule_1 = class NgxStripeModule {
    static forRoot(publishableKey, options) {
        return {
            ngModule: NgxStripeModule_1,
            providers: [
                LazyStripeAPILoader,
                StripeService,
                PlatformService,
                WindowRef,
                DocumentRef,
                {
                    provide: STRIPE_PUBLISHABLE_KEY,
                    useValue: publishableKey
                },
                {
                    provide: STRIPE_OPTIONS,
                    useValue: options
                }
            ]
        };
    }
};
NgxStripeModule = NgxStripeModule_1 = __decorate([
    NgModule({
        imports: [CommonModule],
        declarations: [StripeCardComponent, PaymentRequestComponent],
        exports: [StripeCardComponent, PaymentRequestComponent]
    })
], NgxStripeModule);

/*
 * Public API Surface of ngx-stripe
 */

/**
 * Generated bundle index. Do not edit.
 */

export { DocumentRef, LazyStripeAPILoader, NgxStripeModule, PlatformService, STRIPE_OPTIONS, STRIPE_PUBLISHABLE_KEY, StripeCardComponent, StripeService, WindowRef, isBankAccount, isBankAccountData, isPii, isPiiData, isSourceData, PaymentRequestComponent as ɵa };
//# sourceMappingURL=nomadreservations-ngx-stripe.js.map
